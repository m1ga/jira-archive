{
	"id": "131658",
	"key": "AC-1339",
	"fields": {
		"issuetype": {
			"id": "1",
			"description": "A problem which impairs or prevents the functions of the product.",
			"name": "Bug",
			"subtask": false
		},
		"project": {
			"id": "12217",
			"key": "AC",
			"name": "Appcelerator - INBOX",
			"projectCategory": {
				"id": "10000",
				"description": "",
				"name": "Customer Service"
			}
		},
		"resolution": {
			"id": "5",
			"description": "All attempts at reproducing this issue failed, or not enough information was available to reproduce the issue. Reading the code produces no clues as to why this behavior would occur. If more information appears later, please reopen the issue.",
			"name": "Cannot Reproduce"
		},
		"resolutiondate": "2014-07-09T22:19:01.000+0000",
		"created": "2014-06-12T20:55:46.000+0000",
		"labels": [
			"android",
			"httpclient",
			"leak",
			"memory"
		],
		"versions": [],
		"issuelinks": [],
		"assignee": {
			"name": "mpmiranda",
			"key": "mpmiranda",
			"displayName": "Mauro Parra-Miranda",
			"active": true,
			"timeZone": "America/Mexico_City"
		},
		"updated": "2016-03-08T07:37:44.000+0000",
		"status": {
			"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
			"name": "Closed",
			"id": "6",
			"statusCategory": {
				"id": 3,
				"key": "done",
				"colorName": "green",
				"name": "Done"
			}
		},
		"components": [
			{
				"id": "14548",
				"name": "Titanium SDK & CLI",
				"description": "Please enter tickets related to the MobileSDK here."
			}
		],
		"description": "I noticed lots of HttpClientProxy leaks in our Android application. We double checked our code, ran some tests, profiled the same code base on iOS (it was fine on iOS). Eventually we realized the the HTTPClient object is leaking only when there are concurrent xhr requests.\r\n\r\nTest 1 (Leaks)\r\n------------------\r\n\r\nI built a test case and profiled it to confirm our conclusion. In test one, the app will send 20 concurrent HTTP requests. When profiled, it will show that all the HTTPClientProxy objects were leaked, even after invoking GC multiple times.\r\n\r\n\"20 instances of \"ti.modules.titanium.network.HTTPClientProxy\", loaded by \"dalvik.system.PathClassLoader @ 0xb1083270\" occupy 5,327,960 (28.38%) bytes.\"\r\n\r\nTest 2 (Doesn't Leak)\r\n----------------------------\r\n\r\nWhile with test 2, the requests are queued and sent one at a time (100ms delay between every response and next request). The profile result showed that none of the HTTPClientProxy objects were leaked.\r\nI read numerous posts on this forum and most of them were old (from 1.8 days). I'm running my tests on version 3.2.3. Android 4.3.2.\r\n\r\nTest code below:\r\n\r\nfunction xhrRequest(callback) {\r\n    var xhr = Ti.Network.createHTTPClient({\r\n        timeout : 5000,\r\n        cache : false,\r\n        onload : function(e) {\r\n            if (callback) {\r\n                callback();\r\n            }\r\n        }\r\n    });\r\n \r\n    xhr.open('POST', 'https://www.yahoo.com/');\r\n    xhr.send();\r\n}\r\n \r\nfunction xhrRequestTest1(tests, callback) {\r\n    var completed = 0;\r\n    for (var i=0;i<tests;i++) {\r\n        xhrRequest(function() {\r\n            console.log('Test 1 #' + completed + ' completed');\r\n            completed += 1;\r\n            if (completed == tests) {\r\n                callback();\r\n            }\r\n        });\r\n    }\r\n}\r\n \r\nfunction xhrRequestTest2(tests, callback) {\r\n    if (tests == 0) {\r\n        callback();\r\n        return;\r\n    }\r\n    xhrRequest(function() {\r\n        console.log('Test 2 #' + tests + ' completed');\r\n        setTimeout(function() {\r\n            xhrRequestTest2(tests-1, callback);\r\n        }, 100);\r\n    });\r\n \r\n}\r\n \r\n \r\nvar window = Ti.UI.createWindow({\r\n    layout : 'vertical'\r\n});\r\n \r\nvar button1 = Ti.UI.createButton({\r\n    title : 'Test #1: Concurrent XHR requests'\r\n});\r\n \r\nbutton1.addEventListener('click', function() {\r\n    xhrRequestTest1(20, function() {\r\n        alert('Test 1 completed. Invoke GC and test for leaks');\r\n    });\r\n});\r\n \r\nvar button2 = Ti.UI.createButton({\r\n    title : 'Test #2: Queued XHR requests'\r\n});\r\n \r\nbutton2.addEventListener('click', function() {\r\n    xhrRequestTest2(20, function() {\r\n        alert('Test 2 completed. Invoke GC and test for leaks');\r\n    });\r\n});\r\n \r\nwindow.add(button1);\r\nwindow.add(button2);\r\n \r\nwindow.open();",
		"attachment": [],
		"flagged": false,
		"summary": "Android memory leak",
		"creator": {
			"name": "ekhoury",
			"key": "ekhoury",
			"displayName": "Elie Khoury",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"subtasks": [],
		"reporter": {
			"name": "ekhoury",
			"key": "ekhoury",
			"displayName": "Elie Khoury",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"environment": "Titanium SDK 3.2.3 (android)",
		"comment": {
			"comments": [
				{
					"id": "311548",
					"author": {
						"name": "mpmiranda",
						"key": "mpmiranda",
						"displayName": "Mauro Parra-Miranda",
						"active": true,
						"timeZone": "America/Mexico_City"
					},
					"body": "Hello Elie!\r\n\r\nI did some testing with your testcase. It doesn't prove the memory leak yet. We need a testcase that:\r\n\r\n- Does one operation (like your xhr element)\r\n- Then we repeat the operation\r\n- We can check in the heap that it's growing every time you do that operation\r\n- Then you simulate a Garbage Collector call in Android Monitor\r\n- And continue doing this operation until it shows that the memory is leaking no matter what you do (by example, running the Garbage collector, as the Android OS would do).\r\n\r\nAs a result of my testing, it claims that Bitmap element is leaking more memory (using MAT). MAT will provide a clue if something is leaking, but it's not a proof yet. \r\n\r\nIf you find a testcase like the mentioned, we can move this to Platform. \r\n\r\nThanks a lot! ",
					"updateAuthor": {
						"name": "mpmiranda",
						"key": "mpmiranda",
						"displayName": "Mauro Parra-Miranda",
						"active": true,
						"timeZone": "America/Mexico_City"
					},
					"created": "2014-06-30T06:14:27.000+0000",
					"updated": "2014-06-30T06:14:27.000+0000"
				},
				{
					"id": "313100",
					"author": {
						"name": "mpmiranda",
						"key": "mpmiranda",
						"displayName": "Mauro Parra-Miranda",
						"active": true,
						"timeZone": "America/Mexico_City"
					},
					"body": "Customer hasn't replied to us yet.",
					"updateAuthor": {
						"name": "mpmiranda",
						"key": "mpmiranda",
						"displayName": "Mauro Parra-Miranda",
						"active": true,
						"timeZone": "America/Mexico_City"
					},
					"created": "2014-07-09T22:19:01.000+0000",
					"updated": "2014-07-09T22:19:01.000+0000"
				}
			],
			"maxResults": 2,
			"total": 2,
			"startAt": 0
		}
	}
}