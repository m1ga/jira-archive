{
	"id": "172874",
	"key": "AC-6108",
	"fields": {
		"issuetype": {
			"id": "4",
			"description": "An improvement or enhancement to an existing feature or task.",
			"name": "Improvement",
			"subtask": false
		},
		"project": {
			"id": "12217",
			"key": "AC",
			"name": "Appcelerator - INBOX",
			"projectCategory": {
				"id": "10000",
				"description": "",
				"name": "Customer Service"
			}
		},
		"resolution": {
			"id": "7",
			"description": "",
			"name": "Invalid"
		},
		"resolutiondate": "2019-01-29T17:40:10.000+0000",
		"created": "2019-01-15T23:11:10.000+0000",
		"labels": [],
		"versions": [],
		"issuelinks": [],
		"assignee": {
			"name": "shossain",
			"key": "shossain",
			"displayName": "Shak Hossain",
			"active": false,
			"timeZone": "America/Los_Angeles"
		},
		"updated": "2019-01-29T17:40:10.000+0000",
		"status": {
			"description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
			"name": "Resolved",
			"id": "5",
			"statusCategory": {
				"id": 3,
				"key": "done",
				"colorName": "green",
				"name": "Done"
			}
		},
		"components": [
			{
				"id": "14544",
				"name": "Alloy",
				"description": "Please enter tickets related to the Alloy here."
			}
		],
		"description": "With data binding if you close a view from the controller with a Ti.UI.Animation parameter and have called $.destroy() in the same close function, the animation runs first causing binding events to fire, effective making $.destroy useless in this context. Without an animation parameter $.destroy works as intended.\r\n\r\nTo remedy I have placed a $.removeListener() call before the $.getView().close(Ti.UI.createAnimation({})) call.\r\n\r\nIt might be a good idea to pop this in the docs as it's not *really* a bug.",
		"attachment": [],
		"flagged": false,
		"summary": "Calling close() with a Ti.UI.Animation will run before $.destroy() causing binding events to fire on close.",
		"creator": {
			"name": "nickkemp",
			"key": "nickkemp",
			"displayName": "Nick Kemp",
			"active": true,
			"timeZone": "Pacific/Auckland"
		},
		"subtasks": [],
		"reporter": {
			"name": "nickkemp",
			"key": "nickkemp",
			"displayName": "Nick Kemp",
			"active": true,
			"timeZone": "Pacific/Auckland"
		},
		"environment": null,
		"comment": {
			"comments": [
				{
					"id": "445489",
					"author": {
						"name": "sdarda",
						"key": "sdarda",
						"displayName": "Sharif AbuDarda",
						"active": false,
						"timeZone": "Asia/Dhaka"
					},
					"body": "Hello [~nickkemp], Can you share a sample core that demonstrates the behavior? Please send the standalone sample code and steps to reproduce the issue. Thanks.",
					"updateAuthor": {
						"name": "sdarda",
						"key": "sdarda",
						"displayName": "Sharif AbuDarda",
						"active": false,
						"timeZone": "Asia/Dhaka"
					},
					"created": "2019-01-19T13:47:43.000+0000",
					"updated": "2019-01-19T13:47:43.000+0000"
				},
				{
					"id": "445682",
					"author": {
						"name": "rmitro",
						"key": "rmitro",
						"displayName": "Rakhi Mitro",
						"active": false,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Hello [~nickkemp], \r\n\r\nWe haven't heard back from you since our last response. I thought I’d check in to see how things are progressing on your end. Did you manage to create sample a test project? \r\n\r\nHave a great day.\r\n\r\n",
					"updateAuthor": {
						"name": "rmitro",
						"key": "rmitro",
						"displayName": "Rakhi Mitro",
						"active": false,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2019-01-28T05:38:48.000+0000",
					"updated": "2019-01-28T05:38:48.000+0000"
				},
				{
					"id": "445718",
					"author": {
						"name": "nickkemp",
						"key": "nickkemp",
						"displayName": "Nick Kemp",
						"active": true,
						"timeZone": "Pacific/Auckland"
					},
					"body": "Hi Rakhi,\r\n\r\nI have created a test case, but couldn't reproduce. I think it maybe related to alloyXL.js. My current thinking is that due to the event binding in alloyXL, the js call stack is different causing the behaviour I'm seeing. I will continue to look at it, but it seems it's something for the alloyXL not you guys.\r\n\r\nCheers,",
					"updateAuthor": {
						"name": "nickkemp",
						"key": "nickkemp",
						"displayName": "Nick Kemp",
						"active": true,
						"timeZone": "Pacific/Auckland"
					},
					"created": "2019-01-28T21:49:46.000+0000",
					"updated": "2019-01-28T21:49:46.000+0000"
				}
			],
			"maxResults": 3,
			"total": 3,
			"startAt": 0
		}
	}
}