{
	"id": "91621",
	"key": "ALOY-33",
	"fields": {
		"issuetype": {
			"id": "4",
			"description": "An improvement or enhancement to an existing feature or task.",
			"name": "Improvement",
			"subtask": false
		},
		"project": {
			"id": "11113",
			"key": "ALOY",
			"name": "Alloy",
			"projectCategory": {
				"id": "10400",
				"description": "Tools for developing applications",
				"name": "Tooling"
			}
		},
		"fixVersions": [
			{
				"id": "14036",
				"description": "2012 Sprint 14",
				"name": "2012 Sprint 14",
				"archived": true,
				"released": true,
				"releaseDate": "2012-07-19"
			}
		],
		"resolution": {
			"id": "1",
			"description": "A fix for this issue is checked into the tree and tested.",
			"name": "Fixed"
		},
		"resolutiondate": "2012-07-19T11:52:04.000+0000",
		"created": "2012-05-08T15:08:09.000+0000",
		"priority": {
			"name": "High",
			"id": "2"
		},
		"labels": [],
		"versions": [
			{
				"id": "14036",
				"description": "2012 Sprint 14",
				"name": "2012 Sprint 14",
				"archived": true,
				"released": true,
				"releaseDate": "2012-07-19"
			}
		],
		"issuelinks": [
			{
				"id": "17380",
				"type": {
					"id": "10003",
					"name": "Relates",
					"inward": "relates to",
					"outward": "relates to"
				},
				"inwardIssue": {
					"id": "91421",
					"key": "ALOY-43",
					"fields": {
						"summary": "The user want to use CSS and style by id, class and style attribute.",
						"status": {
							"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
							"name": "Closed",
							"id": "6",
							"statusCategory": {
								"id": 3,
								"key": "done",
								"colorName": "green",
								"name": "Done"
							}
						},
						"priority": {
							"name": "High",
							"id": "2"
						},
						"issuetype": {
							"id": "7",
							"description": "gh.issue.story.desc",
							"name": "Story",
							"subtask": false
						}
					}
				}
			}
		],
		"assignee": {
			"name": "tlukasavage",
			"key": "tlukasavage",
			"displayName": "Tony Lukasavage",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"updated": "2014-06-22T13:21:16.000+0000",
		"status": {
			"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
			"name": "Closed",
			"id": "6",
			"statusCategory": {
				"id": 3,
				"key": "done",
				"colorName": "green",
				"name": "Done"
			}
		},
		"components": [
			{
				"id": "12329",
				"name": "Runtime",
				"description": "Generic bucket for uncategorized runtime issues"
			},
			{
				"id": "12326",
				"name": "XML",
				"description": "View XML and parsing"
			}
		],
		"description": "Currently at runtime, CSS is parsed by reading strings, parsing them, then applying the appropriate titanium properties based on the style. This runtime string parsing will inevitably create a performance issue as the complexity of an app grows. We need to rethink how we are going to handle CSS at runtime in a way that performs more efficiently.\r\n\r\nA likely alternative would be to create JSON structures for the CSS at translation time that can then be accessed by the Titanium app at runtime. That where there would only be runtime css parsing if a user manually modifies the CSS in code.\r\n",
		"attachment": [],
		"flagged": false,
		"summary": "CSS runtime parsing needs to be revised",
		"creator": {
			"name": "tlukasavage",
			"key": "tlukasavage",
			"displayName": "Tony Lukasavage",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"subtasks": [],
		"reporter": {
			"name": "tlukasavage",
			"key": "tlukasavage",
			"displayName": "Tony Lukasavage",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"environment": null,
		"comment": {
			"comments": [
				{
					"id": "195644",
					"author": {
						"name": "tlukasavage",
						"key": "tlukasavage",
						"displayName": "Tony Lukasavage",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Lazy loading of the components complicates application of CSS. If CSS selectors are applied in a different order than the DOM is created, you have the potential of lazy loaded components getting created before their parents.\r\n\r\napp.css\r\n{code}\r\n#header {\r\n    /* various header properties */\r\n}\r\n{code}\r\n\r\napp.html\r\n{code}\r\n<div id=\"mainWindow>\r\n    <div id=\"header\"></div>\r\n</div>\r\n{code}\r\n\r\nDue to the way the {{$Ti}} selector code is structured, and the nature of the lazy loading of Ti objects from DOM objects, if the CSS rule for {{#header}} is processed before {{#mainWindow}} is accessed, there will be an exception. This is because the {{$Ti}} selector code will assume then that the lazy loaded {{#header}} element can be added to its parent {{#mainWindow}}, but {{#mainWindow}} doesn't exist yet.",
					"updateAuthor": {
						"name": "tlukasavage",
						"key": "tlukasavage",
						"displayName": "Tony Lukasavage",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-22T14:34:04.000+0000",
					"updated": "2012-05-22T14:34:04.000+0000"
				},
				{
					"id": "195646",
					"author": {
						"name": "rmcmahon",
						"key": "rmcmahon",
						"displayName": "Russell McMahon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "\r\nCan we make sure a parent is created before a child? Maybe walk the dom tree to the root (<body>) and make sure a complete view tree is available before the child is added.",
					"updateAuthor": {
						"name": "rmcmahon",
						"key": "rmcmahon",
						"displayName": "Russell McMahon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-22T14:41:24.000+0000",
					"updated": "2012-05-22T14:41:24.000+0000"
				},
				{
					"id": "195647",
					"author": {
						"name": "rmcmahon",
						"key": "rmcmahon",
						"displayName": "Russell McMahon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "\r\nI had thought that there was code already doing that, but if you are seeing a crash then you are correct we need to revisit.",
					"updateAuthor": {
						"name": "rmcmahon",
						"key": "rmcmahon",
						"displayName": "Russell McMahon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-22T14:43:05.000+0000",
					"updated": "2012-05-22T14:43:05.000+0000"
				},
				{
					"id": "195657",
					"author": {
						"name": "tlukasavage",
						"key": "tlukasavage",
						"displayName": "Tony Lukasavage",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "walking up the tree is likely what we will have to do. We could also have a parameter for the {{$Ti}} selector that indicates we don't want to create Ti objects as we encounter them, but that doesn't really solve the root problem. \r\n\r\nPerhaps the last thing that happens in the app_dom.js, after the DOM is constructed, is accessing the root Titanium node. This would create all the DOM elements for the current DOM for the current view.\r\n\r\nThis leads me to a more important question. Should lazy loading even be necessary inside a view? We are talking about each view and widget having its own DOM, isn't it safe to assume that all DOM elements for a particular view and/or widget can be loaded when the view/widget itself is loaded? We are still lazy loading in the sense that we wouldn't load an unloaded view/widget's DOM until it was necessary, but we don't have to lazy load within the view/widget itself. My short term solution in the last paragraph would sort of give us this now, since loading the root Titanium node would effectively load all nodes for the view.",
					"updateAuthor": {
						"name": "tlukasavage",
						"key": "tlukasavage",
						"displayName": "Tony Lukasavage",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-22T15:46:04.000+0000",
					"updated": "2012-05-22T15:46:04.000+0000"
				},
				{
					"id": "195670",
					"author": {
						"name": "rmcmahon",
						"key": "rmcmahon",
						"displayName": "Russell McMahon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Widgets will have their own DOM so all the objects of the widget will be created on init. Widgets are created from markup using <div data-ti-ziplet=\"myWidget\" .../> so I think we are okay with widgets.\r\n\r\nI was thinking like the original test sample we still could have a project broken into multiple html files just to make things easy. The user would be responsible for keeping ids unique and all the markup across all html files would be in the global dom. The original sample had a second window contained in it's own html file open when a button on the first window was pressed. I had loaded all the html from the <meta name=\"ti-include\" content=\"win2.html\"></meta>. We had talked about having an include api so the markup could be injected directly into a div tree if desired. <div data-ti-api=\"Include\" data-ti-src=\"path/to/html/file\" />",
					"updateAuthor": {
						"name": "rmcmahon",
						"key": "rmcmahon",
						"displayName": "Russell McMahon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-22T16:26:19.000+0000",
					"updated": "2012-05-22T16:26:19.000+0000"
				},
				{
					"id": "195680",
					"author": {
						"name": "tlukasavage",
						"key": "tlukasavage",
						"displayName": "Tony Lukasavage",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "I recently removed the ti-include markup handling because the aim with the separate markup files I thought was to maintain encapsulation. It's the same principle which causes us to use commonjs. You can build modular UI components without having to worry about ID collisions, or exposing all of the underlying elements of a view when they don't need to be exposed. \r\n\r\nIs the idea now to _not_ create modular views via markup, but to instead have all markup views share the same global DOM? It just seems sort of contradictory to what we've preached with JS dev in best practices in terms of creating reusable components. Do we not want to apply the same logic to HTML markup, or do we abide by the global nature of the ID attribute, whether it suits our current best practices or not? ",
					"updateAuthor": {
						"name": "tlukasavage",
						"key": "tlukasavage",
						"displayName": "Tony Lukasavage",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-22T17:10:16.000+0000",
					"updated": "2012-05-22T17:10:16.000+0000"
				},
				{
					"id": "196449",
					"author": {
						"name": "tlukasavage",
						"key": "tlukasavage",
						"displayName": "Tony Lukasavage",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "CSS in external, embedded, and inline markup is converted to JSON at compile-time. CSS specified in code at runtime will still need to be parsed.",
					"updateAuthor": {
						"name": "tlukasavage",
						"key": "tlukasavage",
						"displayName": "Tony Lukasavage",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-30T06:10:31.000+0000",
					"updated": "2012-05-30T06:10:31.000+0000"
				}
			],
			"maxResults": 7,
			"total": 7,
			"startAt": 0
		}
	}
}