{
	"id": "60732",
	"key": "TIMOB-100",
	"fields": {
		"issuetype": {
			"id": "1",
			"description": "A problem which impairs or prevents the functions of the product.",
			"name": "Bug",
			"subtask": false
		},
		"project": {
			"id": "10153",
			"key": "TIMOB",
			"name": "Titanium SDK/CLI",
			"projectCategory": {
				"id": "10100",
				"description": "Titanium and related SDKs used in application development",
				"name": "Client"
			}
		},
		"fixVersions": [
			{
				"id": "11213",
				"name": "Release 0.7.0",
				"archived": true,
				"released": true,
				"releaseDate": "2009-10-05"
			}
		],
		"resolution": {
			"id": "1",
			"description": "A fix for this issue is checked into the tree and tested.",
			"name": "Fixed"
		},
		"resolutiondate": "2011-04-17T01:51:59.000+0000",
		"created": "2011-04-15T02:23:39.000+0000",
		"priority": {
			"name": "Medium",
			"id": "3"
		},
		"labels": [
			"ios",
			"iphone"
		],
		"versions": [],
		"issuelinks": [],
		"assignee": {
			"name": "blainhamon",
			"key": "blainhamon",
			"displayName": "Blain Hamon",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"updated": "2011-04-17T01:51:59.000+0000",
		"status": {
			"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
			"name": "Closed",
			"id": "6",
			"statusCategory": {
				"id": 3,
				"key": "done",
				"colorName": "green",
				"name": "Done"
			}
		},
		"components": [
			{
				"id": "10206",
				"name": "iOS",
				"description": "iOS Platform"
			}
		],
		"description": "{html}<div><p>This affects:</p>\n<ul>\n<li>\n<p>textfields</p>\n</li>\n<li>\n<p>sliders</p>\n</li>\n<li>\n<p>switches</p>\n</li>\n<li>\n<p>textareas</p>\n</li>\n<li>\n<p>tabbedbars (iPhone only)</p>\n</li>\n</ul>\n<p>Setting values:</p>\n<p>textfield.setValue('newValue');</p>\n<p>Getting values:</p>\n<p>var val = textfield.getValue();</p>\n<p>or</p>\n<p>var val = textfield.value;</p>\n<p>Also, for the tabbed bar, we should probably do something\nlike:</p>\n<p>tabbedbar.setIndex(index);</p>\n<p>var activeIndex = tabbedbar.index</p>\n<p>or</p>\n<p>var activeIndex = tabbedbar.getIndex();</p></div>{html}",
		"attachment": [],
		"flagged": false,
		"summary": "Set control values dynamically after creation",
		"creator": {
			"name": "nwright",
			"key": "nwright",
			"displayName": "Nolan Wright",
			"active": false,
			"timeZone": "America/Los_Angeles"
		},
		"subtasks": [],
		"reporter": {
			"name": "nwright",
			"key": "nwright",
			"displayName": "Nolan Wright",
			"active": false,
			"timeZone": "America/Los_Angeles"
		},
		"environment": null,
		"comment": {
			"comments": [
				{
					"id": "122757",
					"author": {
						"name": "blainhamon",
						"key": "blainhamon",
						"displayName": "Blain Hamon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "{html}<div><p>While I'm working on it, I've refactored the event callback to\nupdate the proxy's value and index values so that the end dev\ndoesn't have to. I'm not sure how we can easily avoid recursion of\nmaking .value a setter function, beyond having to backmask all the\nvariables.</p>\n<p>For now, I'm going to have\nsetValue=function(arg){this.value=arg;this.update()};</p>\n<p>wrt tabbed bar, the 'index' property is already used during\ninitialization and in the event callback.</p></div>{html}",
					"updateAuthor": {
						"name": "blainhamon",
						"key": "blainhamon",
						"displayName": "Blain Hamon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2011-04-15T02:23:39.000+0000",
					"updated": "2011-04-15T02:23:39.000+0000"
				},
				{
					"id": "122758",
					"author": {
						"name": "dthorp",
						"key": "dthorp",
						"displayName": "Don Thorp",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "{html}<div><p>I usually have the properties invoke the getter/setter method so\nI typically don't have any recursion issues. Are you using the\n<strong>defineGetter</strong> and <strong>defineSetter</strong>\nmethods for the properties?</p></div>{html}",
					"updateAuthor": {
						"name": "dthorp",
						"key": "dthorp",
						"displayName": "Don Thorp",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2011-04-15T02:23:39.000+0000",
					"updated": "2011-04-15T02:23:39.000+0000"
				},
				{
					"id": "122759",
					"author": {
						"name": "blainhamon",
						"key": "blainhamon",
						"displayName": "Blain Hamon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "{html}<div><p>Implemented with properties done as foo.setBar(baz) to trigger\nan update. doing foo.bar=baz won't trigger the update. baz=foo.bar\nworks, but baz=foo.getBar() is not yet implemented.</p></div>{html}",
					"updateAuthor": {
						"name": "blainhamon",
						"key": "blainhamon",
						"displayName": "Blain Hamon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2011-04-15T02:23:39.000+0000",
					"updated": "2011-04-15T02:23:39.000+0000"
				}
			],
			"maxResults": 3,
			"total": 3,
			"startAt": 0
		}
	}
}