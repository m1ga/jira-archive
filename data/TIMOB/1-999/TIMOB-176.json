{
	"id": "60808",
	"key": "TIMOB-176",
	"fields": {
		"issuetype": {
			"id": "1",
			"description": "A problem which impairs or prevents the functions of the product.",
			"name": "Bug",
			"subtask": false
		},
		"project": {
			"id": "10153",
			"key": "TIMOB",
			"name": "Titanium SDK/CLI",
			"projectCategory": {
				"id": "10100",
				"description": "Titanium and related SDKs used in application development",
				"name": "Client"
			}
		},
		"fixVersions": [
			{
				"id": "11216",
				"name": "Release 0.8.0",
				"archived": true,
				"released": true,
				"releaseDate": "2009-11-20"
			}
		],
		"resolution": {
			"id": "1",
			"description": "A fix for this issue is checked into the tree and tested.",
			"name": "Fixed"
		},
		"resolutiondate": "2011-04-17T01:52:14.000+0000",
		"created": "2011-04-15T02:24:48.000+0000",
		"priority": {
			"name": "Medium",
			"id": "3"
		},
		"labels": [
			"feature",
			"ios",
			"iphone"
		],
		"versions": [],
		"issuelinks": [],
		"assignee": {
			"name": "blainhamon",
			"key": "blainhamon",
			"displayName": "Blain Hamon",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"updated": "2011-04-17T01:52:14.000+0000",
		"status": {
			"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
			"name": "Closed",
			"id": "6",
			"statusCategory": {
				"id": 3,
				"key": "done",
				"colorName": "green",
				"name": "Done"
			}
		},
		"components": [
			{
				"id": "10206",
				"name": "iOS",
				"description": "iOS Platform"
			}
		],
		"description": "{html}<div><h2>Description</h2>\n<p>The purpose of this API is to display a contacts dialog and\nallow a user to select a contact</p>\n<h2>Examples</h2>\n<pre>\n<code class=\"javascript\">\n//\n// show contact picker\n//\n\n//\n//  if array of details is specified, the detail view will be shown\n//  when the contact is selected.  this will also trigger e.key, and e.index in the success callback\n//\nTitanium.Contacts.showContactPicker({\n\n   success:function(event)\n   {\n        // e.contact\n        // e.key\n        // e.index\n\n   },\n   cancel:function()\n   {\n    // user canceled\n   },\n   details:[array of constants]\n);\n\n//\n// Supported Contact property names \n//\nfirstName\nlastName\nmiddleName\nprefix\nsuffix\nnickname\nfirstNamePhonetic\nlastNamePhonetic\nmiddleNamePhonetic\norganization\njobTitle\ndepartment\nbirthday\nnote\ncreationDate\nmodificationDate\nimageData\nphoneNumber\naddress\nemail\n\n//\n//  get all contacts\n//\nvar contacts = Titanium.Contacts.getAllContacts()\nvar c = contacts[0];\nvar birthday = c.birthday\n\n// remove contact\nTitanium.Contacts.removeContact(c);\n\n// modify contact\nc.firstName = 'Fred';\nTitanium.Contacts.saveContact(c);\n\n\n//\n// create new contact\n//\nvar c = Titanium.Contacts.createContact({\n    firstName:'Fred',\n    lastName:'Smith'\n\n})\n\nTitanium.Contacts.addContact(c);\n\n//\n// create new contact using multi-value fields like email, phone and address\n//\nvar c = Titanium.Contacts.createContact({\n    email:[{label:'home', value:'foo@foo.com'}],\n    phone:[{label:'home', value:'3032223333'}],\n    address:[{label:'home', value:[{city:'Foo', state:'GA', zip:'40344', street1:'value', street2:'value'}]\n})</code>\n</pre></div>{html}",
		"attachment": [],
		"flagged": false,
		"summary": "API - Contacts Dialog",
		"creator": {
			"name": "nwright",
			"key": "nwright",
			"displayName": "Nolan Wright",
			"active": false,
			"timeZone": "America/Los_Angeles"
		},
		"subtasks": [],
		"reporter": {
			"name": "nwright",
			"key": "nwright",
			"displayName": "Nolan Wright",
			"active": false,
			"timeZone": "America/Los_Angeles"
		},
		"environment": null,
		"comment": {
			"comments": [
				{
					"id": "122890",
					"author": {
						"name": "blainhamon",
						"key": "blainhamon",
						"displayName": "Blain Hamon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "{html}<div><p>We'll probably want to add functionality later on for being able\nto pick not only a person, but other UI features:</p>\n<p>Pick a person and a property (IE, phone number out of several),\ncomplete with a filter of what to show.<br>\n(See <a href=\n\"http://developer.apple.com/IPhone/library/documentation/AddressBookUI/Reference/ABPeoplePickerNavigationControllerDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/ABPeoplePickerNavigationControllerDelegate/peoplePickerNavigationController:shouldContinueAfterSelectingPerson:property:identifier\">\nhttp://developer.apple.com/IPhone/library/documentation/AddressBook...</a>:\n)</p>\n<p>View a person that's been chosen from the database, filter of\nwhat to show, allow editing of it, etc. The callback should return\na boolean on whether to act on user input. (IE, if the user touched\nthe phone number, to launch the phone)<br>\n(See <a href=\n\"http://developer.apple.com/IPhone/library/documentation/AddressBookUI/Reference/ABPersonViewController_Class/Reference/Reference.html\">\nhttp://developer.apple.com/IPhone/library/documentation/AddressBook...</a>\n)</p>\n<p>Present an 'add a person' dialog, with prepopulated properties,\nand let them add it to the address book.<br>\n(See <a href=\n\"http://developer.apple.com/IPhone/library/documentation/AddressBookUI/Reference/ABNewPersonViewController_Class/Reference/Reference.html\">\nhttp://developer.apple.com/IPhone/library/documentation/AddressBook...</a>\n)</p>\n<p>Present an 'unknown person' (IE, could be new person, could be\nold person and the data needs merging) which has the new person\ndynamicness as well as the ability to launch actions like view a\nperson.<br>\n(See <a href=\n\"http://developer.apple.com/IPhone/library/documentation/AddressBookUI/Reference/ABUnknownPersonViewController_Class/Reference/Reference.html\">\nhttp://developer.apple.com/IPhone/library/documentation/AddressBook...</a>\n)</p></div>{html}",
					"updateAuthor": {
						"name": "blainhamon",
						"key": "blainhamon",
						"displayName": "Blain Hamon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2011-04-15T02:24:48.000+0000",
					"updated": "2011-04-15T02:24:48.000+0000"
				},
				{
					"id": "122891",
					"author": {
						"name": "blainhamon",
						"key": "blainhamon",
						"displayName": "Blain Hamon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "{html}<div><p>Notes to self:</p>\n<p>More flies in the ointment. While the properties are integers on\nthe native side, accessing images are done with a completely\ndifferent function. Fetching this all for getAllContacts is\nprohibitive. The image blobs alone would take too much memory all\nat one time.</p>\n<p>Not only that, but it's unlikely that Android will have the same\nvalues. So perhaps we should use string values and do the mapping\nnative-side.</p>\n<p>So the data sent to the callback must be an array of\nlazy-loading objects with the following properties:</p>\n<p>_REFID:,</p>\n<p>_CACHE:{dict of fetched values},</p>\n<p>_DELTA:{dict of js-set values},</p>\n<p>getFoo:function(){</p>\n<p>if(this.<em>DELTA.foo)return this.</em>DELTA.foo;</p>\n<p>if(this.<em>CACHE.foo===undefined)this.</em>CACHE.foo =\nTi.<em>TIDO('contacts','getContactProperty',[this.</em>REFID,'foo']);</p>\n<p>return this._CACHE.foo;</p>\n<p>},</p>\n<p>setFoo:function(newFoo){this._DELTA.foo=newFoo;}</p>\n<p>appropriate setters and getters for every foo. I'm thinking\nmaking an object class for this. The win here also is that there\nneed not be any native-side caching contacts, and when saving a\ncontact, only the delta need be sent back.</p>\n<p>Actually, this pattern may be very useful in other objects.</p></div>{html}",
					"updateAuthor": {
						"name": "blainhamon",
						"key": "blainhamon",
						"displayName": "Blain Hamon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2011-04-15T02:24:48.000+0000",
					"updated": "2011-04-15T02:24:48.000+0000"
				},
				{
					"id": "122892",
					"author": {
						"name": "jhaynie",
						"key": "jhaynie",
						"displayName": "Jeff Haynie",
						"active": false,
						"timeZone": "America/Los_Angeles"
					},
					"body": "{html}<div><p>this is mostly implemented and tested for iphone.</p>\n<p>however, it crashes when you pass <code>@</code> symbol to email\nproperty when creating a contact.</p></div>{html}",
					"updateAuthor": {
						"name": "jhaynie",
						"key": "jhaynie",
						"displayName": "Jeff Haynie",
						"active": false,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2011-04-15T02:24:48.000+0000",
					"updated": "2011-04-15T02:24:48.000+0000"
				},
				{
					"id": "122893",
					"author": {
						"name": "blainhamon",
						"key": "blainhamon",
						"displayName": "Blain Hamon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "{html}<div><p>Ready for testing.</p></div>{html}",
					"updateAuthor": {
						"name": "blainhamon",
						"key": "blainhamon",
						"displayName": "Blain Hamon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2011-04-15T02:24:49.000+0000",
					"updated": "2011-04-15T02:24:49.000+0000"
				},
				{
					"id": "122894",
					"author": {
						"name": "dthorp",
						"key": "dthorp",
						"displayName": "Don Thorp",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "{html}<div><p>add read only properties w/ getters.</p>\n<p>displayLabel (map to display value in \"pick list\" style, e.g.\nCompany if no person name)<br>\ndisplayName (constructed from Person Name Attributes Prefix, First,\nMiddle, Last Suffix)<br>\ndisplayAddress (Address String a concatenation of the pieces)<br>\ndisplayPhoneticName (same as displayName using phonetic values,\ndoes not include prefix and suffix)</p></div>{html}",
					"updateAuthor": {
						"name": "dthorp",
						"key": "dthorp",
						"displayName": "Don Thorp",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2011-04-15T02:24:49.000+0000",
					"updated": "2011-04-15T02:24:49.000+0000"
				},
				{
					"id": "122895",
					"author": {
						"name": "blainhamon",
						"key": "blainhamon",
						"displayName": "Blain Hamon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "{html}<div><p>Ready for testing.</p></div>{html}",
					"updateAuthor": {
						"name": "blainhamon",
						"key": "blainhamon",
						"displayName": "Blain Hamon",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2011-04-15T02:24:49.000+0000",
					"updated": "2011-04-15T02:24:49.000+0000"
				}
			],
			"maxResults": 6,
			"total": 6,
			"startAt": 0
		}
	}
}