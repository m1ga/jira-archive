{
	"id": "61765",
	"key": "TIMOB-1133",
	"fields": {
		"issuetype": {
			"id": "1",
			"description": "A problem which impairs or prevents the functions of the product.",
			"name": "Bug",
			"subtask": false
		},
		"project": {
			"id": "10153",
			"key": "TIMOB",
			"name": "Titanium SDK/CLI",
			"projectCategory": {
				"id": "10100",
				"description": "Titanium and related SDKs used in application development",
				"name": "Client"
			}
		},
		"fixVersions": [
			{
				"id": "11258",
				"description": "Holding Pen for Triaged Issues",
				"name": "Backlog",
				"archived": false,
				"released": false
			}
		],
		"resolution": {
			"id": "7",
			"description": "",
			"name": "Invalid"
		},
		"resolutiondate": "2011-04-15T02:44:54.000+0000",
		"created": "2011-04-15T02:44:54.000+0000",
		"priority": {
			"name": "Medium",
			"id": "3"
		},
		"labels": [],
		"versions": [],
		"issuelinks": [],
		"assignee": {
			"name": "stephentramer",
			"key": "stephentramer",
			"displayName": "Stephen Tramer",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"updated": "2017-03-02T18:15:18.000+0000",
		"status": {
			"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
			"name": "Closed",
			"id": "6",
			"statusCategory": {
				"id": 3,
				"key": "done",
				"colorName": "green",
				"name": "Done"
			}
		},
		"components": [
			{
				"id": "10206",
				"name": "iOS",
				"description": "iOS Platform"
			}
		],
		"description": "{html}<div><p>Right now view properties are set in any order because of how\n-[TiProxy allKeys] works (namely, it returns the properties in any\ngeneric order). For some classes, properties need to be set in a\nvery specific order, since some properties rely on others being\npre-set; so far we've had to jury-rig systems which take this into\naccount. Maybe a -[TiUIView propertyConfigurationOrder] function or\nsomething that will handle this?</p></div>{html}",
		"attachment": [],
		"flagged": false,
		"summary": "Allow for ordering of property setting",
		"creator": {
			"name": "stephentramer",
			"key": "stephentramer",
			"displayName": "Stephen Tramer",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"subtasks": [],
		"reporter": {
			"name": "stephentramer",
			"key": "stephentramer",
			"displayName": "Stephen Tramer",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"environment": null,
		"comment": {
			"comments": [
				{
					"id": "124927",
					"author": {
						"name": "stephentramer",
						"key": "stephentramer",
						"displayName": "Stephen Tramer",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "{html}<div><p>Actually, there are two scenarios where this would be\nneeded:</p>\n<p>(1) Changing those properties which are order-dependent after\ncreation would damage things anyway, and so they must be\nwritten</p>\n<p>(2) -[TiProxy allKeys] can be overloaded to handle those\nproperties which should only be set at creation time (or are\norder-dependent at creation time) as in the case of\nTiUITableViewRowProxy.</p>\n<p>Marking this invalid as a result but it's good to keep in\nmind.</p></div>{html}",
					"updateAuthor": {
						"name": "stephentramer",
						"key": "stephentramer",
						"displayName": "Stephen Tramer",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2011-04-15T02:44:54.000+0000",
					"updated": "2011-04-15T02:44:54.000+0000"
				},
				{
					"id": "408328",
					"author": {
						"name": "lmorris",
						"key": "lmorris",
						"displayName": "Lee Morris",
						"active": false,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Closing as invalid.",
					"updateAuthor": {
						"name": "lmorris",
						"key": "lmorris",
						"displayName": "Lee Morris",
						"active": false,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2017-03-02T18:15:16.000+0000",
					"updated": "2017-03-02T18:15:16.000+0000"
				}
			],
			"maxResults": 2,
			"total": 2,
			"startAt": 0
		}
	}
}