{
	"id": "163769",
	"key": "TIMOB-23990",
	"fields": {
		"issuetype": {
			"id": "4",
			"description": "An improvement or enhancement to an existing feature or task.",
			"name": "Improvement",
			"subtask": false
		},
		"project": {
			"id": "10153",
			"key": "TIMOB",
			"name": "Titanium SDK/CLI",
			"projectCategory": {
				"id": "10100",
				"description": "Titanium and related SDKs used in application development",
				"name": "Client"
			}
		},
		"fixVersions": [],
		"resolution": null,
		"resolutiondate": null,
		"created": "2016-10-06T11:38:09.000+0000",
		"priority": {
			"name": "Medium",
			"id": "3"
		},
		"labels": [],
		"versions": [],
		"issuelinks": [],
		"assignee": {
			"name": "gmathews",
			"key": "gmathews",
			"displayName": "Gary Mathews",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"updated": "2018-02-26T19:36:02.000+0000",
		"status": {
			"description": "The issue is open and ready for the assignee to start work on it.",
			"name": "Open",
			"id": "1",
			"statusCategory": {
				"id": 2,
				"key": "new",
				"colorName": "blue-gray",
				"name": "To Do"
			}
		},
		"components": [
			{
				"id": "10202",
				"name": "Android",
				"description": "Android Platform"
			}
		],
		"description": "Quote from [~cwilliams] [GitHub|https://github.com/appcelerator/titanium_mobile/pull/8459#issuecomment-251833180]\r\n\r\n{quote}\r\nso clearly I think our existing behavior is basically flukey and happened by chance/luck more than anything. We should definitely revisit the behavior for jsValueToJavaObject, since order of comparisons clearly matters. The test failures on this past PR build should be pretty informative to see exactly what case broke by moving to a more explicit Number check. But I'd argue we should define the actual conversion order in a more formal way, likely trying explicit checks like IsNumberObject(), IsBooleanObject(), etc first, and if all of those fail, then moving down to the more forgiving checks (but again, what order we try those will still matter - not sure if there's any spec on that).\r\n\r\nLooking at the code, it looks like this conversion is used when:\r\n- we are trying to convert to a generic java.lang.Object\r\n- we are trying to convert to a KrollProxy\r\n- converting elements in varargs array\r\n- the result of invoking a V8Function\r\n- the result of calling a native property on a V8Object\r\n- the result of nativeEvalString in V8Runtime\r\n- converting js args into an Object[] (for each element)\r\n- converting js array to java Object[] (for each element)\r\n- converting keys and values in a JS Object (which this PR would fix to only be used for values)\r\n- in jsObjectIndexPropsToJavaArray (which seems to be used only in some special edge case on creating a proxy object?)\r\n\r\nI'm not sure if we can move away from using it so much and use more specific conversions where we know the target types in advance?\r\n\r\nOn another tangent, since we've updated V8 to ES6 compat, we should actually consider the new JS types that have been introduced and how to convert/handle those:\r\n- Generators\r\n- Promises\r\n- Maps\r\n- Sets\r\n- Typed arrays (uint8, uint8 clamped, int8, uint16, int16, uint32, int32, float32, float64)\r\n\r\nAnd I'm not sure we ever handled regexps. God knows how we'd handle those (we could convert to equivalent Patterns or something, but not sure how we'd handle state when doing matches or whatever).\r\n{quote}",
		"attachment": [],
		"flagged": false,
		"summary": "Android: Improve TypeConverter::jsValueToJavaObject() implementation",
		"creator": {
			"name": "gmathews",
			"key": "gmathews",
			"displayName": "Gary Mathews",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"subtasks": [],
		"reporter": {
			"name": "gmathews",
			"key": "gmathews",
			"displayName": "Gary Mathews",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"environment": null,
		"closedSprints": [
			{
				"id": 1000,
				"state": "closed",
				"name": "2018 Sprint 04 SDK",
				"startDate": "2018-02-12T04:23:01.913Z",
				"endDate": "2018-02-26T04:23:00.000Z",
				"completeDate": "2018-02-26T19:36:01.769Z",
				"originBoardId": 114
			},
			{
				"id": 126,
				"state": "closed",
				"name": "2018 Sprint 05 SDK",
				"startDate": "2018-02-25T19:38:08.926Z",
				"endDate": "2018-03-11T18:38:00.000Z",
				"completeDate": "2018-03-11T22:06:01.520Z",
				"originBoardId": 100
			}
		],
		"comment": {
			"comments": [],
			"maxResults": 0,
			"total": 0,
			"startAt": 0
		}
	}
}