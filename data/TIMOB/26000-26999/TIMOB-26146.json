{
	"id": "171826",
	"key": "TIMOB-26146",
	"fields": {
		"issuetype": {
			"id": "4",
			"description": "An improvement or enhancement to an existing feature or task.",
			"name": "Improvement",
			"subtask": false
		},
		"project": {
			"id": "10153",
			"key": "TIMOB",
			"name": "Titanium SDK/CLI",
			"projectCategory": {
				"id": "10100",
				"description": "Titanium and related SDKs used in application development",
				"name": "Client"
			}
		},
		"fixVersions": [
			{
				"id": "19882",
				"name": "Release 8.0.0",
				"archived": false,
				"released": true,
				"releaseDate": "2019-03-14"
			}
		],
		"resolution": {
			"id": "1",
			"description": "A fix for this issue is checked into the tree and tested.",
			"name": "Fixed"
		},
		"resolutiondate": "2019-01-07T22:43:58.000+0000",
		"created": "2018-06-22T02:45:04.000+0000",
		"epic": {
			"id": 152521,
			"key": "TIMOB-19834",
			"name": "Support ES6 for Titanium Application Development",
			"summary": "Support ES6 for Titanium Application Development",
			"color": {
				"key": "color_1"
			},
			"done": false
		},
		"priority": {
			"name": "Medium",
			"id": "3"
		},
		"labels": [
			"es6"
		],
		"versions": [],
		"issuelinks": [
			{
				"id": "57089",
				"type": {
					"id": "10003",
					"name": "Relates",
					"inward": "relates to",
					"outward": "relates to"
				},
				"outwardIssue": {
					"id": "167217",
					"key": "TIMOB-24610",
					"fields": {
						"summary": "Support ES6 by transpiling to ES5 via new tiapp.xml \"transpile\" property",
						"status": {
							"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
							"name": "Closed",
							"id": "6",
							"statusCategory": {
								"id": 3,
								"key": "done",
								"colorName": "green",
								"name": "Done"
							}
						},
						"priority": {
							"name": "Medium",
							"id": "3"
						},
						"issuetype": {
							"id": "2",
							"description": "A new feature of the product, which has yet to be developed.",
							"name": "New Feature",
							"subtask": false
						}
					}
				}
			}
		],
		"assignee": {
			"name": "cwilliams",
			"key": "cwilliams",
			"displayName": "Christopher Williams",
			"active": true,
			"timeZone": "America/New_York"
		},
		"updated": "2019-01-08T11:53:53.000+0000",
		"status": {
			"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
			"name": "Closed",
			"id": "6",
			"statusCategory": {
				"id": 3,
				"key": "done",
				"colorName": "green",
				"name": "Done"
			}
		},
		"components": [],
		"description": "*Summary:*\r\nWe want to guarantee support for all ES6 syntax, functions, and types on all platforms (Android, iOS, Windows) and all supported OS versions by Titanium 8.0.0. This way, all CommonJS modules built for Titanium 8.0.0 can be written in ES6. This also means we need to drop support of our \"tiapp.xml\" {{<transpile/>}} setting so that it cannot be turned off.\r\n\r\nCurrently, CommonJS modules have to be written for ES5 since transpile/polyfill can be disabled by an app. This also means that they can't provide APIs that use promises, especially since iOS 9 doesn't natively support them. (A module could document that it only supports ES6 enabled apps, but this is inconvenient.)\r\n\r\n*Issues to be resolved:*\r\n* Babel is currently injecting {{'use strict'}} into all JS files, which is a breaking change for app developers that don't adhere to this setting. _(This is why transpile/polyfill is off by default.)_\r\n* We need a mapping file so that a runtime error's stack trace would lineup with the app developer's code. We currently log the trace and display the trace via an alert. We need to consider online crash reporting as well. _(Do we add the mapping file to the app bundle for non-production builds?)_\r\n* Anything else?\r\n",
		"attachment": [],
		"flagged": false,
		"summary": "Enable ES6 transpile/polyfill by default",
		"creator": {
			"name": "jquick",
			"key": "jquick",
			"displayName": "Joshua Quick",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"subtasks": [],
		"reporter": {
			"name": "jquick",
			"key": "jquick",
			"displayName": "Joshua Quick",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"environment": null,
		"comment": {
			"comments": [
				{
					"id": "438649",
					"author": {
						"name": "eharris",
						"key": "eharris",
						"displayName": "Ewan Harris",
						"active": true,
						"timeZone": "Europe/Dublin"
					},
					"body": "[~cbarber] beat me to the punch on https://github.com/appcelerator/titanium_mobile/pull/10112, we should decouple transpilation and polyfill. It's not as big of a problem on Android/Windows as the JS engines are a known target, iOS has a different engine per OS version and one day someone will get bitten. That said I'm not sure how easy it is to split apart the transpile and polyfill steps (without handling polyfill ourselves) as both are done through preset-env",
					"updateAuthor": {
						"name": "eharris",
						"key": "eharris",
						"displayName": "Ewan Harris",
						"active": true,
						"timeZone": "Europe/Dublin"
					},
					"created": "2018-06-22T22:11:12.000+0000",
					"updated": "2018-06-22T22:11:12.000+0000"
				},
				{
					"id": "438650",
					"author": {
						"name": "cbarber",
						"key": "cbarber",
						"displayName": "Chris Barber",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "Babel doesn't polyfill unless you explicitly require babel-polyfill which just pulls in core-js. I am advocating we use core-js and the transpilation will be moot.",
					"updateAuthor": {
						"name": "cbarber",
						"key": "cbarber",
						"displayName": "Chris Barber",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2018-06-22T22:48:00.000+0000",
					"updated": "2018-06-22T22:48:00.000+0000"
				},
				{
					"id": "444966",
					"author": {
						"name": "cwilliams",
						"key": "cwilliams",
						"displayName": "Christopher Williams",
						"active": true,
						"timeZone": "America/New_York"
					},
					"body": "https://github.com/appcelerator/titanium_mobile/pull/10566",
					"updateAuthor": {
						"name": "cwilliams",
						"key": "cwilliams",
						"displayName": "Christopher Williams",
						"active": true,
						"timeZone": "America/New_York"
					},
					"created": "2019-01-03T15:34:55.000+0000",
					"updated": "2019-01-03T15:34:55.000+0000"
				},
				{
					"id": "444974",
					"author": {
						"name": "cwilliams",
						"key": "cwilliams",
						"displayName": "Christopher Williams",
						"active": true,
						"timeZone": "America/New_York"
					},
					"body": "So the current thinking here is:\r\n- We'll enable transpile by default now, but still with the option to opt-out explicitly in your trap.xml\r\n- We are transpiling our own common/bootstrap JS code down as part of our SDK build process, using babel-preset-env to target the underlying JS engines for each platform (min iOS version, packaged v8 version, equivalent safari version for windows jscore port)\r\n- We're using babel 7 to parse/transpile/minify.\r\n- We're doing usage based polyfilling on user js code when we transpile (so it'll inject the polyfills based on what the user is accessing and the target js engine).\r\n- We're parsing user JS code as 'unambiguous' rather than 'module' now. So it should avoid injecting use strict into 'script' style code (i.e. files without import/export).\r\n\r\nI think longer-term there's room for more tweaks:\r\n- Move to \"entry\" polyfilling and add the entry to ti.main.js so the polyfills get loaded once at startup. We'll have to include core-js/polyfill/regenerator in the common JS code packaged in the SDK. So the bundled JS code in the SDK becomes bigger, but then we don't need to worry about polyfills in user code at all; we don't need to copy polyfills into the user's app specially (we'll already be bundling it); we can use the ES6/7/8/9 features in our common/bootstrap code.\r\n- Enforce transpilation (no opt-out)?\r\n- Look into combining all of this with rollup to trim out the dead code paths (specifically the polyfill code that's never needed) - [~gmathews] had looked into this some, but it's tricky due to the order of operations - and I think it more or less requires import/export usage throughout the entire app to work.\r\n- Start making more use of babel plugins to help shrink app codebase like Alloy does (inlining values for known constants, which allows minification to trim dead code)",
					"updateAuthor": {
						"name": "cwilliams",
						"key": "cwilliams",
						"displayName": "Christopher Williams",
						"active": true,
						"timeZone": "America/New_York"
					},
					"created": "2019-01-03T18:01:27.000+0000",
					"updated": "2019-01-03T18:01:27.000+0000"
				},
				{
					"id": "445069",
					"author": {
						"name": "smohammed",
						"key": "smohammed",
						"displayName": "Samir Mohammed",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"updateAuthor": {
						"name": "smohammed",
						"key": "smohammed",
						"displayName": "Samir Mohammed",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2019-01-08T11:53:46.000+0000",
					"updated": "2019-01-08T11:53:46.000+0000"
				}
			],
			"maxResults": 10,
			"total": 10,
			"startAt": 0
		}
	}
}