{
	"id": "173656",
	"key": "TIMOB-27095",
	"fields": {
		"issuetype": {
			"id": "7",
			"description": "gh.issue.story.desc",
			"name": "Story",
			"subtask": false
		},
		"project": {
			"id": "10153",
			"key": "TIMOB",
			"name": "Titanium SDK/CLI",
			"projectCategory": {
				"id": "10100",
				"description": "Titanium and related SDKs used in application development",
				"name": "Client"
			}
		},
		"fixVersions": [],
		"resolution": {
			"id": "10000",
			"description": "",
			"name": "Done"
		},
		"resolutiondate": "2019-07-30T04:23:27.000+0000",
		"created": "2019-05-22T11:32:10.000+0000",
		"priority": {
			"name": "None",
			"id": "6"
		},
		"labels": [],
		"versions": [
			{
				"id": "20429",
				"name": "Release 7.5.1",
				"archived": false,
				"released": true,
				"releaseDate": "2019-02-26"
			}
		],
		"issuelinks": [],
		"assignee": null,
		"updated": "2019-07-30T04:23:27.000+0000",
		"status": {
			"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
			"name": "Closed",
			"id": "6",
			"statusCategory": {
				"id": 3,
				"key": "done",
				"colorName": "green",
				"name": "Done"
			}
		},
		"components": [
			{
				"id": "10202",
				"name": "Android",
				"description": "Android Platform"
			}
		],
		"description": "The enterprise customer  received reports from a customer that their Android app has been producing a high number of ANRs (0.73%, over the bad behaviour threshold of 0.47% and way over their peers median of 0.2%). We have looked into the analytics on the Google Play developer panel and there are multiple causes.  Have attached the top singular ANR (Input dispatching timed out (Waiting because no window has focus but there is a focused application that may eventually add a window when it finishes starting up.), VisibleToUser) and also one that seems to be more prevalent, but as the main error is slightly different they aren't grouped together (Input dispatching timed out (Waiting to send non-key event because the touched window has not finished processing certain input events that were delivered to it over 500.0ms ago. Wait queue length: 29. Wait queue head age: 6053.5ms.), VisibleToUser). \r\n\r\n\r\n*Is it possible to assist them in tracking down the cause of these ANRs? The testing team have been unable to reproduce them, so even any advice as to where they can find them would be appreciated. *\r\n\r\n\r\nAdditionally, the app has a high percentage of users that encounter frozen frames (just shy of 50%). \r\n\r\nSome queries from the customer:\r\n{code}\r\nDo you have a set of best practices in order to avoid this? \r\nDo I understand correctly that the Ti.Worker module doesn't actually spin up other threads and instead just simulates it on one thread by running a worker asynchronously? \r\n\r\n{code}\r\n *Note:* this seems to just be happening on android 8+ and titanium SDK 7.5.1.GA.",
		"attachment": [
			{
				"id": "66633",
				"filename": "play.google.com_apps_publish__account5105261945650023619_(1).png",
				"author": {
					"name": "rmitro",
					"key": "rmitro",
					"displayName": "Rakhi Mitro",
					"active": false,
					"timeZone": "America/Los_Angeles"
				},
				"created": "2019-05-22T11:33:37.000+0000",
				"size": 796781,
				"mimeType": "image/png"
			},
			{
				"id": "66632",
				"filename": "play.google.com_apps_publish__account5105261945650023619.png",
				"author": {
					"name": "rmitro",
					"key": "rmitro",
					"displayName": "Rakhi Mitro",
					"active": false,
					"timeZone": "America/Los_Angeles"
				},
				"created": "2019-05-22T11:33:38.000+0000",
				"size": 565882,
				"mimeType": "image/png"
			}
		],
		"flagged": false,
		"summary": "Android:High rate of Android ANRs and frozen frames",
		"creator": {
			"name": "rmitro",
			"key": "rmitro",
			"displayName": "Rakhi Mitro",
			"active": false,
			"timeZone": "America/Los_Angeles"
		},
		"subtasks": [],
		"reporter": {
			"name": "rmitro",
			"key": "rmitro",
			"displayName": "Rakhi Mitro",
			"active": false,
			"timeZone": "America/Los_Angeles"
		},
		"environment": null,
		"comment": {
			"comments": [
				{
					"id": "448701",
					"author": {
						"name": "jquick",
						"key": "jquick",
						"displayName": "Joshua Quick",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Regarding the ANR referencing {{TiActivity}}, do you have an intent-filter set up for the {{TiActivity}} class? Can I see the \"tiapp.xml\" file so that I can see how it's setting up the AndroidManifest.xml settings? Because I suspect an {{Intent}} is attempting to start {{TiActivity}} which is intended to be used as a Titanium child window. Normally you would set up an intent-filter to launch the main launcher activity. But doing so won't cause a hang (ie: ANR) for me and will instead launch a child window that does nothing since the main \"app.js\" hasn't been loaded yet. I'm totally guessing here since the stack trace isn't helpful.\r\n\r\nRegarding the ANR referencing {{TiTranslucentActivity}}, the fact that it only happens on Android 9 and we see several calls to {{dispatchApplyWindowInsets()}} suggests that this is \"notch\" related. Although the Moto G6 Play doesn't have a notch that I'm aware of. We test on an Android 9 device with a notch nearly every day here, so, this is curious that this is happening to you. Try testing in an Android 9 emulator with \"notch\" support enabled to see if you can reproduce it.\r\n\r\nOr perhaps the app is loading a lot of content when a {{Ti.UI.Window}} has been opened?\r\nAs of Titanium 8.0.0, the JavaScript runtime can only be ran on the main UI thread. Titanium no longer supports running the script on a separate thread. So, long \"blocking\" operations in JavaScript will block the main UI thread too. And yes, \"ti.worker\" runs on the main thread as well and merely simulates worker behavior. We instead suggest using Titanium's async APIs as much as possible. The only major feature that Titanium has that does NOT support async APIs is {{Ti.Database}} which we're looking into.\r\n\r\nYou can measure how long your JavaScript operations take by doing the following.\r\n{code:javascript}\r\nvar startTime = new Date();\r\n// Your code...\r\nTi.API.info(\"@@@ Duration: \" + ((new Date()) - startTime));\r\n{code}\r\n",
					"updateAuthor": {
						"name": "jquick",
						"key": "jquick",
						"displayName": "Joshua Quick",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2019-05-29T02:51:45.000+0000",
					"updated": "2019-05-29T02:51:45.000+0000"
				},
				{
					"id": "449009",
					"author": {
						"name": "jquick",
						"key": "jquick",
						"displayName": "Joshua Quick",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"updateAuthor": {
						"name": "jquick",
						"key": "jquick",
						"displayName": "Joshua Quick",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2019-06-11T22:51:21.000+0000",
					"updated": "2019-06-11T22:51:21.000+0000"
				}
			],
			"maxResults": 9,
			"total": 9,
			"startAt": 0
		}
	}
}