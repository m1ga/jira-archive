{
	"id": "175449",
	"key": "TIMOB-28089",
	"fields": {
		"issuetype": {
			"id": "4",
			"description": "An improvement or enhancement to an existing feature or task.",
			"name": "Improvement",
			"subtask": false
		},
		"project": {
			"id": "10153",
			"key": "TIMOB",
			"name": "Titanium SDK/CLI",
			"projectCategory": {
				"id": "10100",
				"description": "Titanium and related SDKs used in application development",
				"name": "Client"
			}
		},
		"fixVersions": [],
		"resolution": null,
		"resolutiondate": null,
		"created": "2020-08-19T11:31:48.000+0000",
		"priority": {
			"name": "None",
			"id": "6"
		},
		"labels": [],
		"versions": [
			{
				"id": "21039",
				"name": "Release 9.0.3",
				"archived": false,
				"released": true,
				"releaseDate": "2020-06-10"
			}
		],
		"issuelinks": [],
		"assignee": null,
		"updated": "2021-01-30T18:38:51.000+0000",
		"status": {
			"description": "The issue is open and ready for the assignee to start work on it.",
			"name": "Open",
			"id": "1",
			"statusCategory": {
				"id": 2,
				"key": "new",
				"colorName": "blue-gray",
				"name": "To Do"
			}
		},
		"components": [],
		"description": "Local aar files used to work great in Titanium until SDK 9, where we could not place them into the \"lib\" directory anymore. Thanks to @m1ga, there is a workaround, where we can copy it to \"libs\" and compile the module fine afterwards.\r\n\r\nUnfortunately, during app build, the aar file is not found again, which can be fixed by using a precompile hook like [this one|https://github.com/AppWerft/Ti.Infonline/blob/95481db5dee9f11bab556fe012492532d08aa255/android/hooks/copy_libs.js] + a super hacky local directory where the aar can be placed.\r\n\r\nObviously, this is not great, so the Titanium CLI should watch out for aar files under /libs and handle them properly. Hacks like extracting the jar and using that are not productive and won't work in cases like ours, where the aar also has resources like config files.",
		"attachment": [],
		"flagged": false,
		"summary": "Android: Local aar files are not handled well",
		"creator": {
			"name": "hknoechel",
			"key": "hansknoechel",
			"displayName": "Hans Knöchel",
			"active": true,
			"timeZone": "Europe/Berlin"
		},
		"subtasks": [],
		"reporter": {
			"name": "hknoechel",
			"key": "hansknoechel",
			"displayName": "Hans Knöchel",
			"active": true,
			"timeZone": "Europe/Berlin"
		},
		"environment": null,
		"comment": {
			"comments": [
				{
					"id": "456518",
					"author": {
						"name": "jquick",
						"key": "jquick",
						"displayName": "Joshua Quick",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "First, I need to say Google's build system does *+NOT+* support this for library projects. While you can set up an Android library project to \"link\" against a local AAR, it will *+NOT+* \"merge\" the AAR into the built library. Only an Android app project will \"merge\" a local AAR. Again, this is how Google made it and you can confirm this in Android Studio. Meaning what you want requires a \"hack\" to make this work for a native Android Studio developer. And if it requires a \"hack\" to make it work natively in Android Studio, it means it requires a \"hack\" to make it work in Titanium's build system too.\r\n\r\nAlso, we want to encourage developer to use the gradle dependency management system over local AARs, because it avoids \"class name collision\" build failures which plagued us before. This means less tech-support issues for us. Since the vast majority of AARs people need can be referenced this way, I'm okay with keeping it this way (just like how Google is okay with keeping it this way).",
					"updateAuthor": {
						"name": "jquick",
						"key": "jquick",
						"displayName": "Joshua Quick",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2020-08-19T19:07:34.000+0000",
					"updated": "2020-08-19T19:07:34.000+0000"
				},
				{
					"id": "456519",
					"author": {
						"name": "hknoechel",
						"key": "hansknoechel",
						"displayName": "Hans Knöchel",
						"active": true,
						"timeZone": "Europe/Berlin"
					},
					"body": "I cannot agree on that. First, I'm sad to see this being edited as a \"Improvement\" instead of a \"Bug\". Things that worked before and also work on native Android projects but don't in Titanium rather feels like bugs to me.\r\n\r\nRegarding the issue: We simply don't live in that perfect world of deployed libraries that are managed through maven/google. Especially in the B2B area, I've seen so many libraries that are distributed via an aar file and other frameworks / native Android seems to be fine with it. In addition, their sample projects are simple: Just reference the aar like we do in our workaround and it's fine. The only thing is that the build \"pipeline\" does not pick up those files and that causes people to go for (temporary) hacks before looking for alternate frameworks over the long term.",
					"updateAuthor": {
						"name": "hknoechel",
						"key": "hansknoechel",
						"displayName": "Hans Knöchel",
						"active": true,
						"timeZone": "Europe/Berlin"
					},
					"created": "2020-08-19T20:40:44.000+0000",
					"updated": "2020-08-19T20:40:44.000+0000"
				},
				{
					"id": "458119",
					"author": {
						"name": "hknoechel",
						"key": "hansknoechel",
						"displayName": "Hans Knöchel",
						"active": true,
						"timeZone": "Europe/Berlin"
					},
					"body": "Are there any workarounds for this? Some software vendors simply do not distribute their libraries via Gradle (like AWS for some of it's libs), so these have to be handled somehow. In native Android, this is done by placing them into the \"app/libs\" directory, but this does not seem to work in Titanium.",
					"updateAuthor": {
						"name": "hknoechel",
						"key": "hansknoechel",
						"displayName": "Hans Knöchel",
						"active": true,
						"timeZone": "Europe/Berlin"
					},
					"created": "2021-01-30T18:38:51.000+0000",
					"updated": "2021-01-30T18:38:51.000+0000"
				}
			],
			"maxResults": 3,
			"total": 3,
			"startAt": 0
		}
	}
}