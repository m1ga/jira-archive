{
	"id": "86787",
	"key": "TIMOB-7749",
	"fields": {
		"issuetype": {
			"id": "2",
			"description": "A new feature of the product, which has yet to be developed.",
			"name": "New Feature",
			"subtask": false
		},
		"project": {
			"id": "10153",
			"key": "TIMOB",
			"name": "Titanium SDK/CLI",
			"projectCategory": {
				"id": "10100",
				"description": "Titanium and related SDKs used in application development",
				"name": "Client"
			}
		},
		"fixVersions": [
			{
				"id": "12097",
				"description": "",
				"name": "Sprint 2012-05",
				"archived": true,
				"released": true,
				"releaseDate": "2012-03-11"
			},
			{
				"id": "12593",
				"name": "Release 2.0.0",
				"archived": false,
				"released": true,
				"releaseDate": "2012-03-30"
			}
		],
		"resolution": {
			"id": "1",
			"description": "A fix for this issue is checked into the tree and tested.",
			"name": "Fixed"
		},
		"resolutiondate": "2012-02-29T09:07:24.000+0000",
		"created": "2012-02-21T18:08:18.000+0000",
		"priority": {
			"name": "High",
			"id": "2"
		},
		"labels": [
			"drillbit",
			"feature",
			"tooling"
		],
		"versions": [],
		"issuelinks": [
			{
				"id": "15425",
				"type": {
					"id": "10020",
					"name": "Depends",
					"inward": "is dependent of",
					"outward": "depends on"
				},
				"inwardIssue": {
					"id": "86860",
					"key": "MOD-502",
					"fields": {
						"summary": "Cloud Module Integration with TiSDK",
						"status": {
							"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
							"name": "Closed",
							"id": "6",
							"statusCategory": {
								"id": 3,
								"key": "done",
								"colorName": "green",
								"name": "Done"
							}
						},
						"priority": {
							"name": "Critical",
							"id": "1"
						},
						"issuetype": {
							"id": "7",
							"description": "gh.issue.story.desc",
							"name": "Story",
							"subtask": false
						}
					}
				}
			}
		],
		"assignee": {
			"name": "jenglish",
			"key": "jenglish",
			"displayName": "Jeff English",
			"active": true,
			"timeZone": "America/Chicago"
		},
		"updated": "2012-03-19T06:23:06.000+0000",
		"status": {
			"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
			"name": "Closed",
			"id": "6",
			"statusCategory": {
				"id": 3,
				"key": "done",
				"colorName": "green",
				"name": "Done"
			}
		},
		"components": [
			{
				"id": "10204",
				"name": "Drillbit"
			}
		],
		"description": "It would be nice to be able to define a sequence of asynchronous functions that should be executed as part of a single test. For example,\r\n1. Login to a service and verify result (asynchronously)\r\n2. Query data and verify result (asynchronously)\r\n3. Update data and verify result (asynchronously)\r\n4. Logout of service and verify result (asynchronously)\r\n\r\nThis is especially important for validating REST-based services. While this could be done by putting each step into a separate test, it would be good to be able to define these in-line in a single test to avoid issues that could occur if a developer inserted or moved tests around in the test file.",
		"attachment": [],
		"flagged": false,
		"summary": "Drillbit: Add support for creating a sequence of asynchronous operations in a test",
		"creator": {
			"name": "jenglish",
			"key": "jenglish",
			"displayName": "Jeff English",
			"active": true,
			"timeZone": "America/Chicago"
		},
		"subtasks": [],
		"reporter": {
			"name": "jenglish",
			"key": "jenglish",
			"displayName": "Jeff English",
			"active": true,
			"timeZone": "America/Chicago"
		},
		"environment": null,
		"comment": {
			"comments": [
				{
					"id": "183902",
					"author": {
						"name": "jenglish",
						"key": "jenglish",
						"displayName": "Jeff English",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "Example of utilizing this functionality:\r\n\r\n{code}\r\n    // Cloud.Objects.remove\r\n    deleteAllCars: asyncTest({\r\n        start: function(callback) {\r\n\t\t\tvar carIds = [];\r\n\t\t\tthis.sequence.push(function() { Cloud.Objects.query('cars',\r\n\t\t\t\tthis.async(function(e) {\r\n\t\t\t\t\tvalueOf(e.success).shouldBeTrue();\r\n\t\t\t\t\tvalueOf(e.error).shouldBeFalse();\r\n\t\t\t\t\tfor (var i=0; i<e.cars.length; i++) {\r\n\t\t\t\t\t\tcarIds.push(e.cars[i].id);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)});\r\n\t\t\tthis.sequence.push(function() { Cloud.Objects.remove('cars', { ids: carIds.toString() },\r\n\t\t\t\tthis.async(function(e) {\r\n\t\t\t\t\tvalueOf(e.success).shouldBeTrue();\r\n\t\t\t\t\tvalueOf(e.error).shouldBeFalse();\r\n\t\t\t\t})\r\n\t\t\t)});\r\n\t\t\tthis.sequence.push(function() { Cloud.Objects.query('cars',\r\n\t\t\t\tthis.async(function(e) {\r\n\t\t\t\t\tvalueOf(e.success).shouldBeTrue();\r\n\t\t\t\t\tvalueOf(e.error).shouldBeFalse();\r\n\t\t\t\t\tvalueOf(e.cars.length).shouldBe(0);\r\n\t\t\t\t\tvalueOf(e.meta.total_results).shouldBe(0);\r\n\t\t\t\t})\r\n\t\t\t)});\r\n   \t\t},\r\n   \t\ttimeout: 5000,\r\n   \t\ttimeoutError: 'Timed out waiting for remove response'\r\n   \t}),\r\n\t\r\n{code}",
					"updateAuthor": {
						"name": "jenglish",
						"key": "jenglish",
						"displayName": "Jeff English",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-02-21T18:48:16.000+0000",
					"updated": "2012-02-21T18:48:16.000+0000"
				},
				{
					"id": "183903",
					"author": {
						"name": "jenglish",
						"key": "jenglish",
						"displayName": "Jeff English",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "You can even push an `async` function on the sequence if an operation does not involve the use of a callback function (see the last operation in this example):\r\n\r\n{code}\r\n    // Register for push notifications\r\n\tpushTest: asyncTest({\r\n        start: function(callback) {\r\n\t\t\tvar deviceToken;\r\n\t\t\tthis.sequence.push(function() {\r\n\t\t\t\tTi.Network.registerForPushNotifications({\r\n\t\t\t\t\ttypes: [\r\n\t\t\t\t\t\tTi.Network.NOTIFICATION_TYPE_BADGE,\r\n\t\t\t\t\t\tTi.Network.NOTIFICATION_TYPE_ALERT,\r\n\t\t\t\t\t\tTi.Network.NOTIFICATION_TYPE_SOUND\r\n\t\t\t\t\t],\r\n\t\t\t\t\tsuccess: this.async(function (e) {\r\n\t\t\t\t\t\tdeviceToken = e.deviceToken;\r\n\t\t\t\t\t}),\r\n\t\t\t\t\terror: this.async(function(e) {\r\n\t\t\t\t\t\tcallback.failed(e);\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tcallback: this.async(function(e) {\r\n\t\t\t\t\t\t// Do nothing -- the next function in the sequence will automatically\r\n\t\t\t\t\t\t// trigger if we get the push\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\tthis.sequence.push(function() { Cloud.subscribe({ channel: 'test', device_token: deviceToken },\r\n\t\t\t\tthis.async(function(e) {\r\n\t\t\t\t\tvalueOf(e.success).shouldBeTrue();\r\n\t\t\t\t\tvalueOf(e.error).shouldBeFalse();\r\n\t\t\t\t})\r\n\t\t\t)});\r\n\t\t\tthis.sequence.push(function() { Cloud.notify({ channel: 'test', payload: 'Hello World' },\r\n\t\t\t\tthis.async(function(e) {\r\n\t\t\t\t\tvalueOf(e.success).shouldBeTrue();\r\n\t\t\t\t\tvalueOf(e.error).shouldBeFalse();\r\n\t\t\t\t})\r\n\t\t\t)});\r\n\t\t\tthis.sequence.push(function() {\r\n\t\t\t\t// The sequencer will wait after this method returns until something triggers\r\n\t\t\t\t// it to go to the next sequence. Hopefully that will be the receipt of the\r\n\t\t\t\t// push notification.\r\n\t\t\t});\r\n\t\t\tthis.sequence.push(function() { Cloud.unsubscribe({ channel: 'test', device_token: deviceToken },\r\n\t\t\t\tthis.async(function(e) {\r\n\t\t\t\t\tvalueOf(e.success).shouldBeTrue();\r\n\t\t\t\t\tvalueOf(e.error).shouldBeFalse();\r\n\t\t\t\t})\r\n\t\t\t)});\r\n\t\t\tthis.sequence.push(this.async(function() {\r\n \t\t\t\tTi.Network.unregisterForPushNotifications();\r\n\t\t\t}));\r\n   \t\t},\r\n   \t\ttimeout: 10000,\r\n   \t\ttimeoutError: 'Timed out waiting for push notification'\r\n   \t}),\r\n{code}",
					"updateAuthor": {
						"name": "jenglish",
						"key": "jenglish",
						"displayName": "Jeff English",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-02-21T18:51:18.000+0000",
					"updated": "2012-02-21T18:51:18.000+0000"
				},
				{
					"id": "183906",
					"author": {
						"name": "jenglish",
						"key": "jenglish",
						"displayName": "Jeff English",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "PR submitted: https://github.com/appcelerator/titanium_mobile/pull/1479\r\n",
					"updateAuthor": {
						"name": "jenglish",
						"key": "jenglish",
						"displayName": "Jeff English",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-02-21T19:11:06.000+0000",
					"updated": "2012-02-21T19:11:06.000+0000"
				},
				{
					"id": "184336",
					"author": {
						"name": "jenglish",
						"key": "jenglish",
						"displayName": "Jeff English",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "Here is an example that demonstrates that the sequence can be modified while running. In this case, we need to query the remote database to get a list of existing entries to be deleted. Upon receipt of the list we need to issue a 'remove' request for each entry that is returned. Since we don't know ahead of time how many entries there will be, we query the server and insert additional entries into the sequence.\r\n\r\n{code}\r\n    cloudPlacesQueryAndDeleteAll: asyncTest({\r\n        start: function(callback) {\r\n            var ids = [];\r\n                this.sequence.push(function() { Cloud.Places.query(\r\n                    this.async(function(e) {\r\n                        valueOf(e.success).shouldBeTrue();\r\n                        valueOf(e.error).shouldBeFalse();\r\n                        for (var i=0; i<e.places.length; i++) {\r\n                            ids.push(e.places[i].id);\r\n                            this.sequence.unshift(function() { Cloud.Places.remove({\r\n                                place_id: ids.pop()\r\n                            },\r\n                            this.async(function(e) {\r\n                                valueOf(e.success).shouldBeTrue();\r\n                                valueOf(e.error).shouldBeFalse();\r\n                            })\r\n                        )});\r\n                    }\r\n                })\r\n            )});\r\n            this.sequence.push(function() { Cloud.Places.query(\r\n                this.async(function(e) {\r\n                    valueOf(e.success).shouldBeTrue();\r\n                    valueOf(e.error).shouldBeFalse();\r\n                    valueOf(e.places.length).shouldBe(0);\r\n                    valueOf(e.meta.total_results).shouldBe(0);\r\n                })\r\n            )});\r\n        },\r\n        timeout: 5000,\r\n        timeoutError: 'Timed out waiting for remove response'\r\n    }),\r\n{code}",
					"updateAuthor": {
						"name": "jenglish",
						"key": "jenglish",
						"displayName": "Jeff English",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-02-27T07:14:41.000+0000",
					"updated": "2012-02-27T07:14:41.000+0000"
				}
			],
			"maxResults": 4,
			"total": 4,
			"startAt": 0
		}
	}
}