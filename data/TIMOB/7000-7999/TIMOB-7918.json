{
	"id": "87519",
	"key": "TIMOB-7918",
	"fields": {
		"issuetype": {
			"id": "1",
			"description": "A problem which impairs or prevents the functions of the product.",
			"name": "Bug",
			"subtask": false
		},
		"project": {
			"id": "10153",
			"key": "TIMOB",
			"name": "Titanium SDK/CLI",
			"projectCategory": {
				"id": "10100",
				"description": "Titanium and related SDKs used in application development",
				"name": "Client"
			}
		},
		"fixVersions": [],
		"resolution": {
			"id": "7",
			"description": "",
			"name": "Invalid"
		},
		"resolutiondate": "2012-03-13T09:23:46.000+0000",
		"created": "2012-03-07T14:42:42.000+0000",
		"priority": {
			"name": "High",
			"id": "2"
		},
		"labels": [
			"dr-list",
			"parity"
		],
		"versions": [
			{
				"id": "12593",
				"name": "Release 2.0.0",
				"archived": false,
				"released": true,
				"releaseDate": "2012-03-30"
			}
		],
		"issuelinks": [
			{
				"id": "15643",
				"type": {
					"id": "10020",
					"name": "Depends",
					"inward": "is dependent of",
					"outward": "depends on"
				},
				"outwardIssue": {
					"id": "84831",
					"key": "TIMOB-7151",
					"fields": {
						"summary": "MobileWeb: Complete Ti.Network.HTTPClient implementation",
						"status": {
							"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
							"name": "Closed",
							"id": "6",
							"statusCategory": {
								"id": 3,
								"key": "done",
								"colorName": "green",
								"name": "Done"
							}
						},
						"priority": {
							"name": "Low",
							"id": "4"
						},
						"issuetype": {
							"id": "1",
							"description": "A problem which impairs or prevents the functions of the product.",
							"name": "Bug",
							"subtask": false
						}
					}
				}
			},
			{
				"id": "15644",
				"type": {
					"id": "10003",
					"name": "Relates",
					"inward": "relates to",
					"outward": "relates to"
				},
				"outwardIssue": {
					"id": "87640",
					"key": "TIMOB-7946",
					"fields": {
						"summary": "MobileWeb: Ti.XML implementation",
						"status": {
							"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
							"name": "Closed",
							"id": "6",
							"statusCategory": {
								"id": 3,
								"key": "done",
								"colorName": "green",
								"name": "Done"
							}
						},
						"priority": {
							"name": "High",
							"id": "2"
						},
						"issuetype": {
							"id": "1",
							"description": "A problem which impairs or prevents the functions of the product.",
							"name": "Bug",
							"subtask": false
						}
					}
				}
			},
			{
				"id": "15705",
				"type": {
					"id": "10003",
					"name": "Relates",
					"inward": "relates to",
					"outward": "relates to"
				},
				"outwardIssue": {
					"id": "87804",
					"key": "TIMOB-7967",
					"fields": {
						"summary": "Android: Replace Node.text with Node.textContent",
						"status": {
							"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
							"name": "Closed",
							"id": "6",
							"statusCategory": {
								"id": 3,
								"key": "done",
								"colorName": "green",
								"name": "Done"
							}
						},
						"priority": {
							"name": "High",
							"id": "2"
						},
						"issuetype": {
							"id": "2",
							"description": "A new feature of the product, which has yet to be developed.",
							"name": "New Feature",
							"subtask": false
						}
					}
				}
			},
			{
				"id": "15706",
				"type": {
					"id": "10003",
					"name": "Relates",
					"inward": "relates to",
					"outward": "relates to"
				},
				"outwardIssue": {
					"id": "87805",
					"key": "TIMOB-7968",
					"fields": {
						"summary": "iOS: Replace Node.text with Node.textContent",
						"status": {
							"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
							"name": "Closed",
							"id": "6",
							"statusCategory": {
								"id": 3,
								"key": "done",
								"colorName": "green",
								"name": "Done"
							}
						},
						"priority": {
							"name": "High",
							"id": "2"
						},
						"issuetype": {
							"id": "2",
							"description": "A new feature of the product, which has yet to be developed.",
							"name": "New Feature",
							"subtask": false
						}
					}
				}
			},
			{
				"id": "15672",
				"type": {
					"id": "10003",
					"name": "Relates",
					"inward": "relates to",
					"outward": "relates to"
				},
				"outwardIssue": {
					"id": "62345",
					"key": "TIMOB-1713",
					"fields": {
						"summary": "iOS: Implement DOMNode.textContent property for better compatibility with browser JS code",
						"status": {
							"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
							"name": "Closed",
							"id": "6",
							"statusCategory": {
								"id": 3,
								"key": "done",
								"colorName": "green",
								"name": "Done"
							}
						},
						"priority": {
							"name": "Trivial",
							"id": "5"
						},
						"issuetype": {
							"id": "2",
							"description": "A new feature of the product, which has yet to be developed.",
							"name": "New Feature",
							"subtask": false
						}
					}
				}
			}
		],
		"assignee": {
			"name": "ngupta",
			"key": "ngupta",
			"displayName": "Neeraj Gupta",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"updated": "2014-01-28T23:57:34.000+0000",
		"status": {
			"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
			"name": "Closed",
			"id": "6",
			"statusCategory": {
				"id": 3,
				"key": "done",
				"colorName": "green",
				"name": "Done"
			}
		},
		"components": [
			{
				"id": "11500",
				"name": "MobileWeb",
				"description": "Mobile Web (HTML) Platform"
			}
		],
		"description": "h2. Problem\r\n\r\nXML parsing differs between iOS/Android and mobile web. The test case below shows the manner in which I encountered it. In the case of Android and iOS, to retrieve the text of an XML element, one only needs to access the {{text}} property of the {{Element}} object. In mobile web, though, it is necessary to get the first child of the {{Element}}, presumably the text node, then grab the {{nodeValue}} attribute of this child node. The {{text}} property will not work in this case.\r\n\r\nh2. Test Case\r\n\r\n{{feed.xml}} (attached) is a copy of the remote feed used by iOS and Android in this case. Cross origin rules prevent me from making the calls directly to the remote RSS feed with mobile web, and iOS and Android can't use {{HTTPClient}} to access local files.\r\n\r\n{code}\r\nvar url = Ti.Platform.osname === 'mobileweb' ? '/feed.xml' : 'http://feeds.mashable.com/Mashable?format=xml';\r\nvar win = Ti.UI.createWindow({\r\n\tbackgroundColor: '#fff',\r\n\tfullscreen: false,\r\n\texitOnClose: true\r\n});\r\nvar button = Ti.UI.createButton({\r\n\ttitle: 'send request',\r\n\theight: 40,\r\n\twidth: 120\r\n});\r\nwin.add(button);\r\n\r\nvar getRssText = function(item, key) {\r\n\t// Prints title for ios and android, null on mobile web\r\n\tTi.API.info(item.getElementsByTagName(key).item(0).text);\r\n\t\r\n\t// Prints title for mobile web, fails on android and ios\r\n\t// Ti.API.info(item.getElementsByTagName(key).item(0).childNodes[0].nodeValue);\r\n}\r\n\r\nbutton.addEventListener('click', function(e) {\r\n\tvar xhr = Titanium.Network.createHTTPClient();\t\r\n\txhr.open('GET', url);\r\n\t\r\n\txhr.onload = function(e) {\r\n\t\tvar xml = this.responseXML;\r\n\t\tvar items = xml.documentElement.getElementsByTagName(\"item\");\r\n\t\tvar data = [];\r\n\r\n\t\tfor (var i = 0; i < items.length; i++) {\r\n\t\t\tvar item = items.item(i);\r\n\t\t\tgetRssText(item, 'title');\r\n\t\t}\r\n\t};\r\n\txhr.onerror = function(e) {\r\n\t\talert(e.error);\r\n\t};\r\n\txhr.send();\t\r\n});\r\n\r\nwin.open();\r\n\r\n{code}\r\n\r\nh2. Proposed Solution\r\n\r\nMake the functionality of the XML parsing work like iOS and Android as that is what Titanium developers have come to expect. ",
		"attachment": [
			{
				"id": "26074",
				"filename": "feed.xml",
				"author": {
					"name": "tlukasavage",
					"key": "tlukasavage",
					"displayName": "Tony Lukasavage",
					"active": true,
					"timeZone": "America/Los_Angeles"
				},
				"created": "2012-03-07T14:42:42.000+0000",
				"size": 301216,
				"mimeType": "text/xml"
			}
		],
		"flagged": false,
		"summary": "MobileWeb: XML parity issue",
		"creator": {
			"name": "tlukasavage",
			"key": "tlukasavage",
			"displayName": "Tony Lukasavage",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"subtasks": [],
		"reporter": {
			"name": "tlukasavage",
			"key": "tlukasavage",
			"displayName": "Tony Lukasavage",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"environment": "Mac OSX 10.7.2\r\nFF 10.0.2\r\nChrome\r\nTiStudio 1.0.9",
		"comment": {
			"comments": [
				{
					"id": "185767",
					"author": {
						"name": "cbarber",
						"key": "cbarber",
						"displayName": "Chris Barber",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "This is actually because the Ti.Network.HttpClient is not setting responseXML correctly. It's currently setting it to the same string value that is stored in responseText. There is a ticket to finish Ti.Network.HttpClient's implementation here: TIMOB-7151.\r\n\r\nPart of the problem is that Ti.XML is not 100%. We're not quite sure how far off Ti.XML is from being in parity with the other platforms. I created a ticket for Ti.XML here: TIMOB-7946.",
					"updateAuthor": {
						"name": "cbarber",
						"key": "cbarber",
						"displayName": "Chris Barber",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-03-09T10:16:28.000+0000",
					"updated": "2012-03-09T10:16:28.000+0000"
				},
				{
					"id": "185877",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Element.text is a non-standard extension to the DOM Level 2 XML implementation (what iOS and Android purport to implement). Mobile Web explicitly follows the DOM Level 2 (technically Level 3) implementation, meaning it doesn't support Element.text. Use Element.textContent instead.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-03-10T16:18:15.000+0000",
					"updated": "2012-03-10T16:18:15.000+0000"
				},
				{
					"id": "185880",
					"author": {
						"name": "ngupta",
						"key": "ngupta",
						"displayName": "Neeraj Gupta",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Note that we are documenting this behavior difference (text vs textContent) in the APIDoc.",
					"updateAuthor": {
						"name": "ngupta",
						"key": "ngupta",
						"displayName": "Neeraj Gupta",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-03-10T23:29:25.000+0000",
					"updated": "2012-03-10T23:29:25.000+0000"
				},
				{
					"id": "185904",
					"author": {
						"name": "kwhinnery",
						"key": "kwhinnery",
						"displayName": "Kevin Whinnery",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "An API documentation fix is insufficient in this case.  People have extensive XML parsing logic in their native apps dependent on the text property.  Their logic will not work on mobile web, and they will have no idea why.  XML parsing is an API that should achieve 100% parity, there is no justification for having platform-specific differences.  I think it should go in 2.0 - if it can't due to time constraints, it should be done ASAP.  But this issue can't be closed until API parity is achieved.",
					"updateAuthor": {
						"name": "kwhinnery",
						"key": "kwhinnery",
						"displayName": "Kevin Whinnery",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-03-11T12:23:26.000+0000",
					"updated": "2012-03-11T12:23:26.000+0000"
				},
				{
					"id": "185905",
					"author": {
						"name": "cbarber",
						"key": "cbarber",
						"displayName": "Chris Barber",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "I understand, however, the XML parser returns internal document/entity/etc objects. There is no easy or efficient way to \"fix\" the text property on XML elements.\r\n\r\nI'm curious why native platforms chose to use \"text\" instead of \"textContent\".",
					"updateAuthor": {
						"name": "cbarber",
						"key": "cbarber",
						"displayName": "Chris Barber",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-03-11T13:27:08.000+0000",
					"updated": "2012-03-11T13:27:08.000+0000"
				},
				{
					"id": "185906",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Kevin:\r\n\r\nAdding in support for that property will incur a major performance hit on mobile web because we will have to wrap the entire XML API. This will cause major code bloat, thus increasing download size. This will also create multiple additional function call on *every* call to the XML API.\r\n\r\nThe proper solution is to deprecate the .text extension because it is non-standard and support the standards based solution instead. Using the non-standard extensions raises the barrier to entry for web-developers learning our platform, because they are expecting to use the standards based mechanisms. It's always better to say \"we support the standard, just use it like you normally do\" than to say \"we support the standard, but it's not quite the same, so you can't just use it like you normally do.\"\r\n\r\nMobile Web doesn't support any of the properties/methods across the entire API that are currently marked as deprecated...how is this any different?\r\n\r\nI am *strongly* against adding support for the .text extension.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-03-11T13:28:55.000+0000",
					"updated": "2012-03-11T13:38:22.000+0000"
				},
				{
					"id": "185960",
					"author": {
						"name": "kwhinnery",
						"key": "kwhinnery",
						"displayName": "Kevin Whinnery",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "I understand that wrapping the entire XML DOM API would be a pain in the ass and add to the codebase.  But we have to have 100% parity in our XML parsing API, it would be ludicrous to have platform-specific interfaces to a non-visual data processing API.  That means that one of the following must happen:\r\n\r\n1.) Mobile web has to conform to the existing XML API we have in place\r\n2.) Native has to emulate the XML parsing logic used in a variety of mobile web browsers\r\n3.) We need to settle on a new API that can be implemented uniformly across all platforms\r\n\r\nGiven those options, I think it makes more sense for mobile web to have a defensive wrapper which controls Titanium's XML parsing interface.  Having a thin veneer over whatever DOM implementation the browser provides (as in #2) places a rather large burden on native to emulate that browser-specific behavior.\r\n\r\nBut whatever we do, Titanium's XML API should be Titanium's XML API - that's the contract we have with developers.  We should define and control that interface.  #2 makes no sense - forcing native to emulate browser behavior would be a time-consuming development task, and would still break tens of thousands of native apps.  My preference is that we go with something as close as possible to #1, so we don't break, again, the TENS OF THOUSANDS of native applications using XML in 2.0.  But if we need to do something closer to #3, then let's get together on that now and message that clearly when the API changes.  \r\n\r\n",
					"updateAuthor": {
						"name": "kwhinnery",
						"key": "kwhinnery",
						"displayName": "Kevin Whinnery",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-03-12T08:40:15.000+0000",
					"updated": "2012-03-12T08:40:15.000+0000"
				},
				{
					"id": "185969",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "I still strongly disagree...your arguments are not compelling.\r\n\r\n1) will be difficult for us, but that is not why I am against it. It will incur a noticeable performance hit for client applications, and there is simply no way around it if we have to support this one single property. Make no mistake, we will be hurting client apps by doing 1).\r\n\r\n2) This is a trivial change for the other platforms (5-minute change). Your claim that \"forcing native to emulate browser behavior would be a time-consuming development task\" is simply not true. As to breaking tens of thousands of apps, I don't care. Every time we deprecate something, we are breaking apps. I ask again, how is this different than deprecating something else, such as the Geolocation API that has been mostly rewritten?\r\n\r\n3) Why would we do this? The *only* difference between Android/iOS and Mobile Web is this one single property that, as previously mentioned, is very easy for them to change.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-03-12T09:00:21.000+0000",
					"updated": "2012-03-12T09:00:21.000+0000"
				},
				{
					"id": "185970",
					"author": {
						"name": "cbarber",
						"key": "cbarber",
						"displayName": "Chris Barber",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "I agree 110% with Bryan. Developers targeting mobile web can workaround this by simply doing this:\r\n\r\n{code}\r\nvar item = item.getElementsByTagName(key).item(0);\r\nTi.API.log(item.text || item.textContent);\r\n{code}",
					"updateAuthor": {
						"name": "cbarber",
						"key": "cbarber",
						"displayName": "Chris Barber",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-03-12T09:04:32.000+0000",
					"updated": "2012-03-12T09:04:32.000+0000"
				},
				{
					"id": "185986",
					"author": {
						"name": "kwhinnery",
						"key": "kwhinnery",
						"displayName": "Kevin Whinnery",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "I will follow up offline with additional comments, but it seems like having native implement a second property for .textContent, which is the same as .text would be a good \"80%\" step for 2.0.  ",
					"updateAuthor": {
						"name": "kwhinnery",
						"key": "kwhinnery",
						"displayName": "Kevin Whinnery",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-03-12T09:50:19.000+0000",
					"updated": "2012-03-12T09:50:19.000+0000"
				},
				{
					"id": "186202",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Element.text is being deprecated in favor of Element.textContent",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-03-13T09:23:46.000+0000",
					"updated": "2012-03-13T09:23:46.000+0000"
				}
			],
			"maxResults": 11,
			"total": 11,
			"startAt": 0
		}
	}
}