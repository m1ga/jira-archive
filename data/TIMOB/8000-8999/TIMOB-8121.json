{
	"id": "88286",
	"key": "TIMOB-8121",
	"fields": {
		"issuetype": {
			"id": "2",
			"description": "A new feature of the product, which has yet to be developed.",
			"name": "New Feature",
			"subtask": false
		},
		"project": {
			"id": "10153",
			"key": "TIMOB",
			"name": "Titanium SDK/CLI",
			"projectCategory": {
				"id": "10100",
				"description": "Titanium and related SDKs used in application development",
				"name": "Client"
			}
		},
		"fixVersions": [],
		"resolution": {
			"id": "7",
			"description": "",
			"name": "Invalid"
		},
		"resolutiondate": "2012-06-15T13:29:25.000+0000",
		"created": "2012-03-20T14:45:48.000+0000",
		"priority": {
			"name": "High",
			"id": "2"
		},
		"labels": [
			"core",
			"parity"
		],
		"versions": [
			{
				"id": "12593",
				"name": "Release 2.0.0",
				"archived": false,
				"released": true,
				"releaseDate": "2012-03-30"
			}
		],
		"issuelinks": [
			{
				"id": "15846",
				"type": {
					"id": "10003",
					"name": "Relates",
					"inward": "relates to",
					"outward": "relates to"
				},
				"outwardIssue": {
					"id": "88246",
					"key": "TIMOB-8110",
					"fields": {
						"summary": "MobileWeb: Create a new height/width constant of Ti.UI.INHERIT",
						"status": {
							"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
							"name": "Closed",
							"id": "6",
							"statusCategory": {
								"id": 3,
								"key": "done",
								"colorName": "green",
								"name": "Done"
							}
						},
						"priority": {
							"name": "High",
							"id": "2"
						},
						"issuetype": {
							"id": "2",
							"description": "A new feature of the product, which has yet to be developed.",
							"name": "New Feature",
							"subtask": false
						}
					}
				}
			},
			{
				"id": "17513",
				"type": {
					"id": "10003",
					"name": "Relates",
					"inward": "relates to",
					"outward": "relates to"
				},
				"outwardIssue": {
					"id": "92294",
					"key": "TIMOB-9226",
					"fields": {
						"summary": "Android: Review composite layout feature requests",
						"status": {
							"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
							"name": "Closed",
							"id": "6",
							"statusCategory": {
								"id": 3,
								"key": "done",
								"colorName": "green",
								"name": "Done"
							}
						},
						"priority": {
							"name": "High",
							"id": "2"
						},
						"issuetype": {
							"id": "7",
							"description": "gh.issue.story.desc",
							"name": "Story",
							"subtask": false
						}
					}
				}
			},
			{
				"id": "17329",
				"type": {
					"id": "10003",
					"name": "Relates",
					"inward": "relates to",
					"outward": "relates to"
				},
				"inwardIssue": {
					"id": "91979",
					"key": "TIMOB-9181",
					"fields": {
						"summary": "Ti API: UI composite specification update",
						"status": {
							"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
							"name": "Closed",
							"id": "6",
							"statusCategory": {
								"id": 3,
								"key": "done",
								"colorName": "green",
								"name": "Done"
							}
						},
						"priority": {
							"name": "High",
							"id": "2"
						},
						"issuetype": {
							"id": "2",
							"description": "A new feature of the product, which has yet to be developed.",
							"name": "New Feature",
							"subtask": false
						}
					}
				}
			},
			{
				"id": "15848",
				"type": {
					"id": "10003",
					"name": "Relates",
					"inward": "relates to",
					"outward": "relates to"
				},
				"inwardIssue": {
					"id": "88287",
					"key": "TIMOB-8122",
					"fields": {
						"summary": "iOS: Implement support for Ti.UI.INHERIT",
						"status": {
							"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
							"name": "Closed",
							"id": "6",
							"statusCategory": {
								"id": 3,
								"key": "done",
								"colorName": "green",
								"name": "Done"
							}
						},
						"priority": {
							"name": "Medium",
							"id": "3"
						},
						"issuetype": {
							"id": "2",
							"description": "A new feature of the product, which has yet to be developed.",
							"name": "New Feature",
							"subtask": false
						}
					}
				}
			}
		],
		"assignee": {
			"name": "opiecyrus",
			"key": "opiecyrus",
			"displayName": "Opie Cyrus",
			"active": true,
			"timeZone": "America/Chicago"
		},
		"updated": "2017-03-22T21:01:48.000+0000",
		"status": {
			"description": "The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.",
			"name": "Closed",
			"id": "6",
			"statusCategory": {
				"id": 3,
				"key": "done",
				"colorName": "green",
				"name": "Done"
			}
		},
		"components": [
			{
				"id": "10202",
				"name": "Android",
				"description": "Android Platform"
			}
		],
		"description": "Ti.UI.INHERIT tells a control that it's width/height should be based on the parent's width/height, respectively. If the parent's width (for example) is SIZE, then the inherited width is SIZE, otherwise it is FILL. As a result, if a control inherits, the result will be either SIZE or FILL but nothing else. Another way to think about this is that inherit is a different type of \"auto\"...instead of looking to the controls default of FILL/SIZE, it looks to the parent to infer FILL/SIZE.",
		"attachment": [],
		"flagged": false,
		"summary": "Android: Implement support for Ti.UI.INHERIT",
		"creator": {
			"name": "bhughes",
			"key": "bhughes",
			"displayName": "Bryan Hughes",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"subtasks": [],
		"reporter": {
			"name": "bhughes",
			"key": "bhughes",
			"displayName": "Bryan Hughes",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"environment": null,
		"comment": {
			"comments": [
				{
					"id": "187620",
					"author": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"body": "I don't understand, how is this different from using \"100%\"?",
					"updateAuthor": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"created": "2012-03-21T01:44:02.000+0000",
					"updated": "2012-03-21T01:44:02.000+0000"
				},
				{
					"id": "187623",
					"author": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"body": "I found more precise explanation in Git commit comment:\r\n\r\n\r\n\"The INHERIT behavior means the view will use the `width` or `height` of the parent, as specified by the user. For example, if the parent `width` is set to `50%`, then a child with a width of `INHERIT` will inherit the width of `50%`, making it `25%` of the parent's parent's width.\"\r\n\r\n\r\n\r\nBut I'm still struggling to understand when this behavior would be useful.",
					"updateAuthor": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"created": "2012-03-21T01:55:11.000+0000",
					"updated": "2012-03-21T01:55:11.000+0000"
				},
				{
					"id": "187680",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "It's useful when you want to make reusable components and you don't know what the parent width/height is going to be. It could be SIZE, or it could be FILL, but we have no way of knowing when the component is written but we have to support both situations. Note that if you set the width to FILL, and the parent is SIZE, the behavior is undefined. Conversely, if the control's size is SIZE and the parent is FILL, it will probably look bad and waste space. This means there is no good default that exists currently.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-03-21T08:24:58.000+0000",
					"updated": "2012-03-21T08:37:19.000+0000"
				},
				{
					"id": "194852",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "I ended up tweaking the behavior for inherit some to better match how I needed it to act, and how I think people will want to use it. The behavior I implemented is that if the parent's width (for example) is SIZE, then the inherited width is SIZE, otherwise it is FILL. As a result, if a control inherits, the result will be either SIZE or FILL but nothing else. Another way to think about this is that inherit is a different type of \"auto\"...instead of looking to the controls default of FILL/SIZE, it looks to the parent to infer FILL/SIZE. I feel that this will be more useful for developers (plus it just feels less...hacky), but I'm certainly open for discussion.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-15T09:51:44.000+0000",
					"updated": "2012-05-15T09:51:44.000+0000"
				},
				{
					"id": "194967",
					"author": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"body": "\"Note that if you set the width to FILL, and the parent is SIZE, the behavior is undefined.\" - this is good point, but IMO the behavior should not be undefined. I think that parent should have priority and should size itself according to child's content (if child has no content, they should be invisible ~ dimension value should be zero). That way, parent will semantically have size of its content, while child will fill parent. :)",
					"updateAuthor": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"created": "2012-05-16T04:22:37.000+0000",
					"updated": "2012-05-16T04:22:37.000+0000"
				},
				{
					"id": "195005",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "I don't particularly like it being undefined either, and in practice the behavior is defined on a platform by platform basis, but technically the UI composite spec says the behavior is undefined. If we want to change it officially, we need to change the spec.\r\n\r\nOn mobile web, if the parent is size and the child is fill, the child recurses up the tree until it finds a non-size parent and uses that size. Example:\r\n\r\nroot: 50px\r\n   child1: UI.SIZE\r\n      child2: UI.FILL\r\n\r\nChild 2 will be 50px wide.\r\n\r\nThe other platforms tend to work similarly, although this behavior cannot be relied upon since it isn't defined.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-16T09:32:13.000+0000",
					"updated": "2012-05-16T09:32:13.000+0000"
				},
				{
					"id": "195137",
					"author": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"body": "If other platforms implemented similar behavior, than that's something that really should be specified (so that all platforms implement same behavior).\r\n\r\n\r\nSolution implemented on Mobile web is fine, although, as I mentioned, my preference is that parent component has priority (it seems more intuitive to me).",
					"updateAuthor": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"created": "2012-05-17T01:28:43.000+0000",
					"updated": "2012-05-17T01:28:43.000+0000"
				},
				{
					"id": "195180",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "I don't really have a preference either way, so if you feel that parent's taking priority makes more sense, then I am totally fine with that. This ticket is not the place to make that change, however, and a separate ticket should be filed.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-17T10:15:40.000+0000",
					"updated": "2012-05-17T10:15:40.000+0000"
				},
				{
					"id": "195260",
					"author": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"updateAuthor": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"created": "2012-05-18T05:43:00.000+0000",
					"updated": "2012-05-18T05:43:00.000+0000"
				},
				{
					"id": "196522",
					"author": {
						"name": "opiecyrus",
						"key": "opiecyrus",
						"displayName": "Opie Cyrus",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "This change should not be required.  Inheriting the user defined value is already possible via something like:\r\n\r\n{code}\r\nvar win = Ti.UI.createWindow({backgroundColor: 'red'});\r\n\r\nvar view1 = Ti.UI.createView({top: 10, backgroundColor: 'green', width: '30%', height: '30%'});\r\nvar view2 = Ti.UI.createView({backgroundColor: 'yellow', width: view1.width, height: view1.height});\r\nview1.add(view2);\r\nwin.add(view1);\r\n\r\n\r\nvar view3 = Ti.UI.createView({bottom: 10, backgroundColor: 'green', width: '30%', height: '30%'});\r\nvar view4 = Ti.UI.createView({backgroundColor: 'yellow', width: '30%', height: '30%'});\r\nview3.add(view4);\r\nwin.add(view3);\r\n\r\nwin.addEventListener(\"postlayout\", function() {\r\n\tTi.API.info(\"View1 width: \" + view1.width + \" View1 rect.width: \" + view1.rect.width);\r\n});\r\nwin.open();\r\n{code}\r\n\r\nBeyond that, changing the layout mechanism by adding a new layout property should require a parity discussion before any implementation is done.",
					"updateAuthor": {
						"name": "opiecyrus",
						"key": "opiecyrus",
						"displayName": "Opie Cyrus",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-05-30T11:13:20.000+0000",
					"updated": "2012-05-30T11:13:20.000+0000"
				},
				{
					"id": "196529",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Opie: can you tell me how your code sample solves the FILL/SIZE mismatch problem? None of the views in your example are FILL/SIZE, so I'm not seeing the connection. FYI inherit has already been implemented in Mobile Web, although it can certainly be changed or made internal only (most of our controls require it internally).",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-30T11:21:21.000+0000",
					"updated": "2012-05-30T11:21:21.000+0000"
				},
				{
					"id": "196534",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Oh yeah, I should also mention that a key part of inherit is that the child doesn't know about the existence of the parent. This is critical for Mobile Web because we never know what controls the built-in controls will be added to. Devs can add, for example, a label to a parent with SIZE or FILL and we won't know, so we have to handle both scenarios with a single codebase. This is also useful for controls wrapped up in modules and reused.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-30T11:30:27.000+0000",
					"updated": "2012-05-30T11:30:27.000+0000"
				},
				{
					"id": "196690",
					"author": {
						"name": "opiecyrus",
						"key": "opiecyrus",
						"displayName": "Opie Cyrus",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "From the description on this ticket:  \"This operation is considered a raw copy of the user assigned value\".  The above code snippet allows you to set the current view params to the user assigned value of the parent.  \r\n\r\nIf the scope extends beyond the ticket description then I guess I am struggling to understand the use case for this (why does a view need to know about the parent layout params).  Part of the 2.0 layout spec was defining default view behavior for various view types and I don't see why a child view should need to know about the default layout behavior of a parent.  The whole idea was for each view to have its own layout params that are respected regardless of where that view happens to be.\r\n\r\nYou said:\r\n\"It's useful when you want to make reusable components and you don't know what the parent width/height is going to be. It could be SIZE, or it could be FILL, but we have no way of knowing when the component is written but we have to support both situations. Note that if you set the width to FILL, and the parent is SIZE, the behavior is undefined.\"\r\n\r\nbut I don't see how the lack of Ti.UI.INHERIT prevents the creation of reusable UI widgets assuming MW implemented the 2.0 layout spec.  Can you provide a more concrete use case of when this would be needed under the 2.0 layout spec?\r\n\r\n",
					"updateAuthor": {
						"name": "opiecyrus",
						"key": "opiecyrus",
						"displayName": "Opie Cyrus",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-05-31T08:01:22.000+0000",
					"updated": "2012-05-31T08:01:22.000+0000"
				},
				{
					"id": "196695",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Simple: Ti.UI.Button in mobile Web. It is a horizontal layout view that contains two children: the image and the label. The image is SIZExSIZE, so no problem, but the label needs to be FILLxSIZE so that the text can be centered, left aligned, or right aligned. The problem though is when the dev sets the width of the button to SIZE (or doesn't specify since it's the default). This leads to the case of having a parent of width SIZE and a child of width FILL, which is undefined behavior.\r\n\r\nRegarding \"This operation is considered a raw copy of the user assigned value\", that was updated in the comments to be a little different. I'll update the ticket description to match.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-31T09:42:49.000+0000",
					"updated": "2012-05-31T09:42:49.000+0000"
				},
				{
					"id": "196700",
					"author": {
						"name": "opiecyrus",
						"key": "opiecyrus",
						"displayName": "Opie Cyrus",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "You are talking about the internal implementation of a Titanium type.  Beyond that, you should be able to set the position of a label within a parent view (IE: the image view representing the button) with the \"center\" property.  \r\nFrom a pure HTML standpoint, I know there are other ways to accomplish the centering of the label also.  Perhaps we should have a skype over this to discuss in detail.",
					"updateAuthor": {
						"name": "opiecyrus",
						"key": "opiecyrus",
						"displayName": "Opie Cyrus",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-05-31T10:09:11.000+0000",
					"updated": "2012-05-31T10:09:11.000+0000"
				},
				{
					"id": "196703",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "I'm at a conference today, but we can skype tomorrow. I considered all of the options you mentioned, but we couldn't use them for one reason or another (Button has been the source of much pain the past).",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-31T10:13:43.000+0000",
					"updated": "2012-05-31T10:13:43.000+0000"
				},
				{
					"id": "196715",
					"author": {
						"name": "mstepanov",
						"key": "mstepanov",
						"displayName": "Max Stepanov",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Bryan, in most (if not all) layout implementations such issues are covered by simple _hint_ layout property which acts like a preferred size for a control with FILL when its parent is SIZE.\r\nIn your particular example: the label with FILL needs a _hint_ to be set to preferred (minimal) width of the text it contains.\r\n*Edit*: in any way, if Mobile Web(iOS,Android) needs something like INHERIT/etc for its internal implementations, that's absolutely fine. It should not be just exposed to developers.",
					"updateAuthor": {
						"name": "mstepanov",
						"key": "mstepanov",
						"displayName": "Max Stepanov",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-31T10:37:39.000+0000",
					"updated": "2012-05-31T10:43:48.000+0000"
				},
				{
					"id": "196716",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Max, I just checked the docs and I didn't see a hint property in Ti.UI.View. Is it somewhere else?\r\n\r\nIf you guys don't think that this is useful for other developers, then we can make it a hidden layout param in mobile web. I have no problem with that and it wouldn't be the first time either (mobile web supports 5 layout modes, not just the 3 supported by the other platfosm). I just felt that since I ran into this limitation in the layout system, that other developers might have run into it as well and would like to use the solution that I developed to it.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-31T10:53:30.000+0000",
					"updated": "2012-05-31T10:53:30.000+0000"
				},
				{
					"id": "196718",
					"author": {
						"name": "mstepanov",
						"key": "mstepanov",
						"displayName": "Max Stepanov",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Bryan, when I mentioned _hint_ I meant other publicly available layout engines (java, tcl/tk, etc). Sorry for confusion.\r\nBasically my proposal is to add _hint_ instead of _INHERIT_ for developers use.",
					"updateAuthor": {
						"name": "mstepanov",
						"key": "mstepanov",
						"displayName": "Max Stepanov",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-31T10:59:33.000+0000",
					"updated": "2012-05-31T10:59:46.000+0000"
				},
				{
					"id": "196735",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Ah, gotcha. That could work. I prefer inherit simply because it's already implemented and working and it means less work for me :), but if you guys think that hint is cleaner from an API perspective then I am all for it.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-31T11:45:26.000+0000",
					"updated": "2012-05-31T11:45:26.000+0000"
				},
				{
					"id": "196748",
					"author": {
						"name": "opiecyrus",
						"key": "opiecyrus",
						"displayName": "Opie Cyrus",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "Well, I don't wanna add a new public cross platform API point unless there is a clear use case for it.  There may be but the description provided so far doesn't lay out IMO a clear reason to add this.  Implementation challenges for a specific platform are not justifiable reasons IMO to add a cross platform API point.  \r\n\r\nIf there is a cross platform titanium use case that highlights how this is a problem then I am more than open to investigating this further. ",
					"updateAuthor": {
						"name": "opiecyrus",
						"key": "opiecyrus",
						"displayName": "Opie Cyrus",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-05-31T13:04:08.000+0000",
					"updated": "2012-05-31T13:04:08.000+0000"
				},
				{
					"id": "196750",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "The cross-platform use case is if someone wants to create a custom control and bundle it as a module in the marketplace...in that case it is identical to how we create controls in mobile web, just cross-platform.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-31T13:09:26.000+0000",
					"updated": "2012-05-31T13:09:26.000+0000"
				},
				{
					"id": "196763",
					"author": {
						"name": "mstepanov",
						"key": "mstepanov",
						"displayName": "Max Stepanov",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Opie, current layout implementation(s) has a few gaps in expected behavior definition.\r\nBriefly, there are two kinds of problems:\r\n1. Size determination\r\n2. Excess space distribution\r\n\r\nGiven Bryan's Ti.UI.Button as an example for #1, the size is undefined for a container with SIZE when one of the children is FILL. Having multiple FILL children inside fixed sized container is #2.\r\n\r\n#1 is usually solved by _hint_.\r\n#2 by either _grabExcessSpace_ on one of the children or _weight_ across multiple ones (depending is single/multi child stretching is supported). For the _weights_ case, we have percentages, so it's covered.\r\n\r\nI'm not saying we need to add it right away, but all this is a part of Allen's and mine layout review process.",
					"updateAuthor": {
						"name": "mstepanov",
						"key": "mstepanov",
						"displayName": "Max Stepanov",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-31T13:58:40.000+0000",
					"updated": "2012-05-31T14:29:51.000+0000"
				},
				{
					"id": "196785",
					"author": {
						"name": "opiecyrus",
						"key": "opiecyrus",
						"displayName": "Opie Cyrus",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "Well, this is just a matter of codifying the expected behavior IMO rather than exposing a new API point (least in the case of the button example.  \r\n\r\nIMO, when a parent view has SIZE rules and the only child is FILL, nothing would be displayed as SIZE on the parent would take precedence (the child has no knowledge of the grand parent).  If the Parent view has a concrete child(set dimensions or SIZE) with another FILL child then the parent would be the size of the concrete child and the FILL child would only expand to the size of the parent.  I don't see why a new API point would be needed to support this kind of behavior (beyond a new API point making the layout changes even that more complicated).\r\n\r\nMy whole point in this thread is not that the layout system is perfect - only questioning whether a new API point is needed or not for this issue.",
					"updateAuthor": {
						"name": "opiecyrus",
						"key": "opiecyrus",
						"displayName": "Opie Cyrus",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-05-31T15:25:52.000+0000",
					"updated": "2012-05-31T15:25:52.000+0000"
				},
				{
					"id": "196791",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "The problem with that is this sentence: \"the FILL child would only expand to the size of the parent.\" The size of the parent is SIZE, meaning it doesn't have a size itself. In most cases (including button), we want the FILL child to SIZE to it's contents in this specific case, but FILL in all other cases.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-31T15:50:36.000+0000",
					"updated": "2012-05-31T15:50:36.000+0000"
				},
				{
					"id": "196799",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "OK, I've had a thought. This mechanism is not necessary *if* we do two things:\r\n1) Specify that the size/fill conflict is settled by having FILL items sized to 0 (not the current behavior on mobile web, but can be done pretty easily). This behavior is currently undefined, so it is simply a matter of defining the behavior and making sure the platforms comply (mobile web doesn't). There is already a ticket for this mentioned above by Ivan.\r\n2) Implement support for min width/height (mobile web already has this as a hidden property, although it is currently broken). We can set the width to FILL and the min width to SIZE. This way, the FILL will be smaller than SIZE and will thus give the behavior we want. This will be fixed for mobile web in TIMOB-8696",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-31T16:14:38.000+0000",
					"updated": "2012-05-31T16:14:38.000+0000"
				},
				{
					"id": "196865",
					"author": {
						"name": "opiecyrus",
						"key": "opiecyrus",
						"displayName": "Opie Cyrus",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"body": "@Bryan When I say \"the FILL child would only expand to the size of the parent.\" I mean that the SIZE parent would be 0 if it's only child was a FILL view or a real value if one of it's children (IE: the concrete child).  This covers the use case where a valid child exists with hard dimensions (say a button or label) or the case where a child has no concrete dimensions.\r\n\r\nFor example, if I have a Parent view of SIZE and two children:\r\n-1st child is SIZE and its content cause it to be 100x100\r\n-2nd child is FILL and just a view with a background color\r\n\r\nWhen the parent view is rendered, you would likely only see the 2nd child filling up 100x100 (would cover up the first child) since the minimum size of the parent is set to the dimensions of the child with the highest concrete dimensions.\r\n",
					"updateAuthor": {
						"name": "opiecyrus",
						"key": "opiecyrus",
						"displayName": "Opie Cyrus",
						"active": true,
						"timeZone": "America/Chicago"
					},
					"created": "2012-06-01T11:03:51.000+0000",
					"updated": "2012-06-01T11:03:51.000+0000"
				},
				{
					"id": "196866",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "@Opie Yeah I understand that, but it's not useful to me because that only applies to composite layouts, and I'm really talking about horizontal/vertical layouts.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-06-01T11:08:10.000+0000",
					"updated": "2012-06-01T11:08:10.000+0000"
				},
				{
					"id": "414950",
					"author": {
						"name": "lmorris",
						"key": "lmorris",
						"displayName": "Lee Morris",
						"active": false,
						"timeZone": "America/Los_Angeles"
					},
					"body": "Closing ticket as invalid with reference to the above comments.",
					"updateAuthor": {
						"name": "lmorris",
						"key": "lmorris",
						"displayName": "Lee Morris",
						"active": false,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2017-03-22T21:01:48.000+0000",
					"updated": "2017-03-22T21:01:48.000+0000"
				}
			],
			"maxResults": 31,
			"total": 31,
			"startAt": 0
		}
	}
}