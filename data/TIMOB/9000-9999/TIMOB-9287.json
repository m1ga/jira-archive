{
	"id": "92428",
	"key": "TIMOB-9287",
	"fields": {
		"issuetype": {
			"id": "1",
			"description": "A problem which impairs or prevents the functions of the product.",
			"name": "Bug",
			"subtask": false
		},
		"project": {
			"id": "10153",
			"key": "TIMOB",
			"name": "Titanium SDK/CLI",
			"projectCategory": {
				"id": "10100",
				"description": "Titanium and related SDKs used in application development",
				"name": "Client"
			}
		},
		"fixVersions": [],
		"resolution": null,
		"resolutiondate": null,
		"created": "2012-05-25T18:09:58.000+0000",
		"priority": {
			"name": "High",
			"id": "2"
		},
		"labels": [
			"core",
			"parity"
		],
		"versions": [
			{
				"id": "13272",
				"description": "Release 2.0.1",
				"name": "Release 2.0.1",
				"archived": true,
				"released": true,
				"releaseDate": "2012-04-16"
			}
		],
		"issuelinks": [],
		"assignee": null,
		"updated": "2018-02-28T20:03:23.000+0000",
		"status": {
			"description": "The issue is open and ready for the assignee to start work on it.",
			"name": "Open",
			"id": "1",
			"statusCategory": {
				"id": 2,
				"key": "new",
				"colorName": "blue-gray",
				"name": "To Do"
			}
		},
		"components": [
			{
				"id": "10224",
				"name": "TiAPI",
				"description": "This component is used for cross-platform API work. Specifications are most likely to use this component."
			}
		],
		"description": "Titanium has a number of views which are not intended to be containers. However, all views inherit from Ti.UI.View, so they all implement {{add}}, whether or not it does anything useful. Support varies widely by platform.\r\n\r\nI've attempted to document the current state of the API in [Pull Request 2274|https://github.com/appcelerator/titanium_mobile/pull/2274]. However, the platforms should take this the next step and remove add support from these views.\r\n\r\nFrom my research and testing, the non-container views are:\r\n\r\n*   Titanium.UI.ActivityIndicator\t\r\n*   Titanium.UI.Button\r\n*   Titanium.UI.ImageView\t\r\n*   Titanium.UI.Label\r\n*   Titanium.UI.ProgressBar\t\r\n*   Titanium.UI.SearchBar\r\n*   Titanium.UI.Slider\r\n*   Titanium.UI.Switch\r\n*   Titanium.UI.TableView\r\n*   Titanium.UI.TextArea\r\n*   Titanium.UI.TextField\r\n*   Titanium.UI.WebView\r\n\r\nPlease comment if I'm missing any.\r\n\r\nSee also:\r\n\r\nhttps://wiki.appcelerator.org/display/spe/UI+Layout+API+Spec\r\n\r\nProposal for separation of view/viewgroup.\r\n\r\nhttps://wiki.appcelerator.org/display/spe/UI+Layout+Limitations\r\n\r\nLists non-container views. (Same list as here, minus ActivityIndicator.)\r\n\r\nThere may be some iOS-specific views that should also be added to this list \r\n(ButtonBar, TabbedBar, and Toolbar, for instance).\r\n\r\nI propose we address this in the next breaking release.",
		"attachment": [],
		"flagged": false,
		"summary": "Ti API: Non-container views should not support add",
		"creator": {
			"name": "aevans",
			"key": "aevans",
			"displayName": "Arthur Evans",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"subtasks": [],
		"reporter": {
			"name": "aevans",
			"key": "aevans",
			"displayName": "Arthur Evans",
			"active": true,
			"timeZone": "America/Los_Angeles"
		},
		"environment": null,
		"comment": {
			"comments": [
				{
					"id": "196215",
					"author": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"body": "Here is first wiki link that is public (so everyone interested can see it): http://docs.appcelerator.com/titanium/2.0/index.html#!/guide/UI_Composite_Layout_Behavior_Spec\r\nSeconds is private. :(\r\n\r\n\r\nAnyway, if I may say ... I think that the problem is a bit broader than it is presented here and when dealing with some problem it is the best to solve all possible variations.\r\n\r\nSo ... \"add\" method is one problem. It should be present on views that actually can contain other views. But here is the catch, not all views that have \"add\" method can contain any other view, but only particular views. So, picker can only contain picker columns/rows, table view can contain only sections/rows, etc. On the other hand, there are top level containers like tabgroup, tab and window that can't be added to \"lower\" views (for example, tabgroup cannot be added to the scroll view).\r\n\r\n\r\nBecause of that, in my library I implemented the following inheritance scheme: \r\n\r\nThere is one base Element which is inherited by two types of components: Control and Container. Container has methods like \"add\". There is one type of component that inherits Container and that is Context (Context beside \"add\" method has \"open\" method).\r\n\r\nNow, concrete implementation of UI components can be much more strict, robust and semantically correct. Control can't contain other components because they don't have \"add\" method. Container can contain other components, but not of the Context type (they can throw an exception if something is being added that is not instance of Element or is instance of Context). Particular Container type implementation that support adding of particular components can throw an exception when non supported component is being added (for example, table view can check if added component is instance of table view section or table view row). Context type implementation like tabgroup and tab can also have similar restriction, so tabgroup can only contain tab and tab can only contain window.\r\n\r\n\r\n\r\nNote that in some cases there may be a sense in adding something to Label. For example, if you want to have image surrounded by text (like iOS now implements \"add\" method on Label). \r\nI would solve that by adding new container by name TextView, or something like that (although, concrete implementation could be Label in the background)  ... just to keep things clean.\r\nAlso, ImageView has wrong name, because \"View\" part can be associated with container type, which is wrong. Just Image is better.\r\n\r\n\r\n\r\nHope I helped a bit and that this will make Titanium's inheritance scheme better. :)\r\n\r\n\r\n\r\n\r\nCheers, Ivan.",
					"updateAuthor": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"created": "2012-05-28T00:36:01.000+0000",
					"updated": "2012-05-28T00:36:01.000+0000"
				},
				{
					"id": "196218",
					"author": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"body": "Forgot to mention that this inheritance scheme that I implemented is implemented in JS, which does not support multiple inheritance. Java and (probably) Objective-C do support so even better inheritance scheme could be implemented.",
					"updateAuthor": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"created": "2012-05-28T02:51:52.000+0000",
					"updated": "2012-05-28T02:51:52.000+0000"
				},
				{
					"id": "196240",
					"author": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"body": "FYI you can do multiple inheritance in JS, if you implement it yourself. Mobile Web's internal methods {Ti._.declare.declare()} and {Ti._.lang.setObject()} both implement multiple inheritance, although I don't think we use it anywhere currently.\r\n\r\nIt's also worth mentioning that whatever scheme is devised, it must be viable on mobile web, so any JavaScript/HTML limitations related to this topic must be considered.",
					"updateAuthor": {
						"name": "bhughes",
						"key": "bhughes",
						"displayName": "Bryan Hughes",
						"active": true,
						"timeZone": "America/Los_Angeles"
					},
					"created": "2012-05-28T11:51:27.000+0000",
					"updated": "2012-05-28T11:54:25.000+0000"
				},
				{
					"id": "196259",
					"author": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"body": "Oh, I forgot about Mobile Web completely. :(\r\n\r\n\r\n\r\nYeah, multiple inheritance in JS can be emulated (like many other things), I wanted to say that it is not supported natively. \r\n\r\n\r\n\r\nI like to stick to native functionality because of better performances and native syntax (I love \"instanceof\" operator :) ). But, that are just my preferences ...",
					"updateAuthor": {
						"name": "ivan.skugor",
						"key": "ivan.skugor",
						"displayName": "Ivan Skugor",
						"active": true,
						"timeZone": "Europe/Amsterdam"
					},
					"created": "2012-05-29T00:35:53.000+0000",
					"updated": "2012-05-29T00:35:53.000+0000"
				}
			],
			"maxResults": 4,
			"total": 4,
			"startAt": 0
		}
	}
}